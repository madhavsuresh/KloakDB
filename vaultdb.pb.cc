// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vaultdb.proto

#include "vaultdb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_vaultdb_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControlFlowColumn;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FieldDesc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GroupByDef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JoinColID;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PeerHostInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SortDef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Table;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TableID;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Expr;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_JoinDef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vaultdb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Schema;
}  // namespace protobuf_vaultdb_2eproto
namespace vaultdb {
class CoaleseTablesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CoaleseTablesRequest>
      _instance;
} _CoaleseTablesRequest_default_instance_;
class CoaleseTablesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CoaleseTablesResponse>
      _instance;
} _CoaleseTablesResponse_default_instance_;
class GetControlFlowColumnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetControlFlowColumnRequest>
      _instance;
} _GetControlFlowColumnRequest_default_instance_;
class GetControlFlowColumnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetControlFlowColumnResponse>
      _instance;
} _GetControlFlowColumnResponse_default_instance_;
class ControlFlowColumnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlFlowColumn>
      _instance;
} _ControlFlowColumn_default_instance_;
class RepartitionStepTwoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RepartitionStepTwoRequest>
      _instance;
} _RepartitionStepTwoRequest_default_instance_;
class RepartitionStepTwoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RepartitionStepTwoResponse>
      _instance;
} _RepartitionStepTwoResponse_default_instance_;
class RepartitionStepOneRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RepartitionStepOneRequest>
      _instance;
} _RepartitionStepOneRequest_default_instance_;
class TableIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableID>
      _instance;
} _TableID_default_instance_;
class RepartitionStepOneResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RepartitionStepOneResponse>
      _instance;
} _RepartitionStepOneResponse_default_instance_;
class SendTableRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendTableRequest>
      _instance;
} _SendTableRequest_default_instance_;
class SendTableResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendTableResponse>
      _instance;
} _SendTableResponse_default_instance_;
class KFilterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KFilterRequest>
      _instance;
} _KFilterRequest_default_instance_;
class KFilterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KFilterResponse>
      _instance;
} _KFilterResponse_default_instance_;
class KJoinRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KJoinRequest>
      _instance;
} _KJoinRequest_default_instance_;
class KJoinResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KJoinResponse>
      _instance;
} _KJoinResponse_default_instance_;
class GroupByDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupByDef>
      _instance;
} _GroupByDef_default_instance_;
class KAggregateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KAggregateRequest>
      _instance;
} _KAggregateRequest_default_instance_;
class KAggregateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KAggregateResponse>
      _instance;
} _KAggregateResponse_default_instance_;
class JoinColIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinColID>
      _instance;
} _JoinColID_default_instance_;
class JoinDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinDef>
      _instance;
} _JoinDef_default_instance_;
class KSortRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KSortRequest>
      _instance;
} _KSortRequest_default_instance_;
class KSortResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KSortResponse>
      _instance;
} _KSortResponse_default_instance_;
class GeneralizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeneralizeRequest>
      _instance;
} _GeneralizeRequest_default_instance_;
class GeneralizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeneralizeResponse>
      _instance;
} _GeneralizeResponse_default_instance_;
class PeerHostInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerHostInfo>
      _instance;
} _PeerHostInfo_default_instance_;
class GetPeerHostsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPeerHostsRequest>
      _instance;
} _GetPeerHostsRequest_default_instance_;
class GetPeerHostsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPeerHostsResponse>
      _instance;
} _GetPeerHostsResponse_default_instance_;
class DBMSQueryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DBMSQueryRequest>
      _instance;
} _DBMSQueryRequest_default_instance_;
class DBMSQueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DBMSQueryResponse>
      _instance;
} _DBMSQueryResponse_default_instance_;
class RegisterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterRequest>
      _instance;
} _RegisterRequest_default_instance_;
class RegisterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterResponse>
      _instance;
} _RegisterResponse_default_instance_;
class NumHostsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NumHostsRequest>
      _instance;
} _NumHostsRequest_default_instance_;
class NumHostRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NumHostResp>
      _instance;
} _NumHostResp_default_instance_;
class DBQueryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DBQueryRequest>
      _instance;
} _DBQueryRequest_default_instance_;
class DBQueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DBQueryResponse>
      _instance;
} _DBQueryResponse_default_instance_;
class TableRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableRequest>
      _instance;
} _TableRequest_default_instance_;
class TableResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableResponse>
      _instance;
} _TableResponse_default_instance_;
class schemaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<schema>
      _instance;
} _schema_default_instance_;
class TableStreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableStream>
      _instance;
} _TableStream_default_instance_;
class ExprDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Expr>
      _instance;
} _Expr_default_instance_;
class TableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table>
      _instance;
} _Table_default_instance_;
class TuplePageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TuplePage>
      _instance;
} _TuplePage_default_instance_;
class FieldDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldDesc>
      _instance;
} _FieldDesc_default_instance_;
class SchemaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Schema>
      _instance;
} _Schema_default_instance_;
class SortDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SortDef>
      _instance;
} _SortDef_default_instance_;
class TableQueryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableQueryRequest>
      _instance;
} _TableQueryRequest_default_instance_;
class TableQueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableQueryResponse>
      _instance;
} _TableQueryResponse_default_instance_;
}  // namespace vaultdb
namespace protobuf_vaultdb_2eproto {
static void InitDefaultsCoaleseTablesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_CoaleseTablesRequest_default_instance_;
    new (ptr) ::vaultdb::CoaleseTablesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::CoaleseTablesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CoaleseTablesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCoaleseTablesRequest}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsCoaleseTablesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_CoaleseTablesResponse_default_instance_;
    new (ptr) ::vaultdb::CoaleseTablesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::CoaleseTablesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CoaleseTablesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCoaleseTablesResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsGetControlFlowColumnRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_GetControlFlowColumnRequest_default_instance_;
    new (ptr) ::vaultdb::GetControlFlowColumnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::GetControlFlowColumnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetControlFlowColumnRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetControlFlowColumnRequest}, {}};

static void InitDefaultsGetControlFlowColumnResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_GetControlFlowColumnResponse_default_instance_;
    new (ptr) ::vaultdb::GetControlFlowColumnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::GetControlFlowColumnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetControlFlowColumnResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetControlFlowColumnResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_ControlFlowColumn.base,}};

static void InitDefaultsControlFlowColumn() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_ControlFlowColumn_default_instance_;
    new (ptr) ::vaultdb::ControlFlowColumn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::ControlFlowColumn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlFlowColumn =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlFlowColumn}, {}};

static void InitDefaultsRepartitionStepTwoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_RepartitionStepTwoRequest_default_instance_;
    new (ptr) ::vaultdb::RepartitionStepTwoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::RepartitionStepTwoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RepartitionStepTwoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRepartitionStepTwoRequest}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsRepartitionStepTwoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_RepartitionStepTwoResponse_default_instance_;
    new (ptr) ::vaultdb::RepartitionStepTwoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::RepartitionStepTwoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RepartitionStepTwoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRepartitionStepTwoResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsRepartitionStepOneRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_RepartitionStepOneRequest_default_instance_;
    new (ptr) ::vaultdb::RepartitionStepOneRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::RepartitionStepOneRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RepartitionStepOneRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRepartitionStepOneRequest}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsTableID() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_TableID_default_instance_;
    new (ptr) ::vaultdb::TableID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::TableID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TableID =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTableID}, {}};

static void InitDefaultsRepartitionStepOneResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_RepartitionStepOneResponse_default_instance_;
    new (ptr) ::vaultdb::RepartitionStepOneResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::RepartitionStepOneResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RepartitionStepOneResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRepartitionStepOneResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsSendTableRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_SendTableRequest_default_instance_;
    new (ptr) ::vaultdb::SendTableRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::SendTableRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SendTableRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSendTableRequest}, {
      &protobuf_vaultdb_2eproto::scc_info_Schema.base,}};

static void InitDefaultsSendTableResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_SendTableResponse_default_instance_;
    new (ptr) ::vaultdb::SendTableResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::SendTableResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SendTableResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSendTableResponse}, {}};

static void InitDefaultsKFilterRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_KFilterRequest_default_instance_;
    new (ptr) ::vaultdb::KFilterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::KFilterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_KFilterRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsKFilterRequest}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,
      &protobuf_vaultdb_2eproto::scc_info_Expr.base,}};

static void InitDefaultsKFilterResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_KFilterResponse_default_instance_;
    new (ptr) ::vaultdb::KFilterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::KFilterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KFilterResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKFilterResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsKJoinRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_KJoinRequest_default_instance_;
    new (ptr) ::vaultdb::KJoinRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::KJoinRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_KJoinRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsKJoinRequest}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,
      &protobuf_vaultdb_2eproto::scc_info_JoinDef.base,}};

static void InitDefaultsKJoinResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_KJoinResponse_default_instance_;
    new (ptr) ::vaultdb::KJoinResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::KJoinResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KJoinResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKJoinResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsGroupByDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_GroupByDef_default_instance_;
    new (ptr) ::vaultdb::GroupByDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::GroupByDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GroupByDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGroupByDef}, {}};

static void InitDefaultsKAggregateRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_KAggregateRequest_default_instance_;
    new (ptr) ::vaultdb::KAggregateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::KAggregateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_KAggregateRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsKAggregateRequest}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,
      &protobuf_vaultdb_2eproto::scc_info_GroupByDef.base,}};

static void InitDefaultsKAggregateResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_KAggregateResponse_default_instance_;
    new (ptr) ::vaultdb::KAggregateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::KAggregateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KAggregateResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKAggregateResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsJoinColID() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_JoinColID_default_instance_;
    new (ptr) ::vaultdb::JoinColID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::JoinColID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JoinColID =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJoinColID}, {}};

static void InitDefaultsJoinDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_JoinDef_default_instance_;
    new (ptr) ::vaultdb::JoinDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::JoinDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JoinDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJoinDef}, {
      &protobuf_vaultdb_2eproto::scc_info_JoinColID.base,}};

static void InitDefaultsKSortRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_KSortRequest_default_instance_;
    new (ptr) ::vaultdb::KSortRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::KSortRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_KSortRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsKSortRequest}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,
      &protobuf_vaultdb_2eproto::scc_info_SortDef.base,}};

static void InitDefaultsKSortResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_KSortResponse_default_instance_;
    new (ptr) ::vaultdb::KSortResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::KSortResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KSortResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKSortResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsGeneralizeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_GeneralizeRequest_default_instance_;
    new (ptr) ::vaultdb::GeneralizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::GeneralizeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeneralizeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeneralizeRequest}, {}};

static void InitDefaultsGeneralizeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_GeneralizeResponse_default_instance_;
    new (ptr) ::vaultdb::GeneralizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::GeneralizeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeneralizeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeneralizeResponse}, {}};

static void InitDefaultsPeerHostInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_PeerHostInfo_default_instance_;
    new (ptr) ::vaultdb::PeerHostInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::PeerHostInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerHostInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerHostInfo}, {}};

static void InitDefaultsGetPeerHostsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_GetPeerHostsRequest_default_instance_;
    new (ptr) ::vaultdb::GetPeerHostsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::GetPeerHostsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetPeerHostsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetPeerHostsRequest}, {
      &protobuf_vaultdb_2eproto::scc_info_PeerHostInfo.base,}};

static void InitDefaultsGetPeerHostsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_GetPeerHostsResponse_default_instance_;
    new (ptr) ::vaultdb::GetPeerHostsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::GetPeerHostsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetPeerHostsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetPeerHostsResponse}, {}};

static void InitDefaultsDBMSQueryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_DBMSQueryRequest_default_instance_;
    new (ptr) ::vaultdb::DBMSQueryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::DBMSQueryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DBMSQueryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDBMSQueryRequest}, {}};

static void InitDefaultsDBMSQueryResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_DBMSQueryResponse_default_instance_;
    new (ptr) ::vaultdb::DBMSQueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::DBMSQueryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DBMSQueryResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDBMSQueryResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_TableID.base,}};

static void InitDefaultsRegisterRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_RegisterRequest_default_instance_;
    new (ptr) ::vaultdb::RegisterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::RegisterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterRequest}, {}};

static void InitDefaultsRegisterResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_RegisterResponse_default_instance_;
    new (ptr) ::vaultdb::RegisterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::RegisterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterResponse}, {}};

static void InitDefaultsNumHostsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_NumHostsRequest_default_instance_;
    new (ptr) ::vaultdb::NumHostsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::NumHostsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NumHostsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNumHostsRequest}, {}};

static void InitDefaultsNumHostResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_NumHostResp_default_instance_;
    new (ptr) ::vaultdb::NumHostResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::NumHostResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NumHostResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNumHostResp}, {}};

static void InitDefaultsDBQueryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_DBQueryRequest_default_instance_;
    new (ptr) ::vaultdb::DBQueryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::DBQueryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DBQueryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDBQueryRequest}, {}};

static void InitDefaultsDBQueryResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_DBQueryResponse_default_instance_;
    new (ptr) ::vaultdb::DBQueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::DBQueryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DBQueryResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDBQueryResponse}, {}};

static void InitDefaultsTableRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_TableRequest_default_instance_;
    new (ptr) ::vaultdb::TableRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::TableRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TableRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTableRequest}, {}};

static void InitDefaultsTableResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_TableResponse_default_instance_;
    new (ptr) ::vaultdb::TableResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::TableResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TableResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTableResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_Table.base,}};

static void InitDefaultsschema() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_schema_default_instance_;
    new (ptr) ::vaultdb::schema();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::schema::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_schema =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsschema}, {
      &protobuf_vaultdb_2eproto::scc_info_Table.base,}};

static void InitDefaultsTableStream() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_TableStream_default_instance_;
    new (ptr) ::vaultdb::TableStream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::TableStream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TableStream =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTableStream}, {
      &protobuf_vaultdb_2eproto::scc_info_Table.base,}};

static void InitDefaultsExpr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_Expr_default_instance_;
    new (ptr) ::vaultdb::Expr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::Expr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Expr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExpr}, {
      &protobuf_vaultdb_2eproto::scc_info_FieldDesc.base,}};

static void InitDefaultsTable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_Table_default_instance_;
    new (ptr) ::vaultdb::Table();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::Table::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Table =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTable}, {}};

static void InitDefaultsTuplePage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_TuplePage_default_instance_;
    new (ptr) ::vaultdb::TuplePage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::TuplePage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TuplePage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTuplePage}, {}};

static void InitDefaultsFieldDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_FieldDesc_default_instance_;
    new (ptr) ::vaultdb::FieldDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::FieldDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FieldDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFieldDesc}, {}};

static void InitDefaultsSchema() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_Schema_default_instance_;
    new (ptr) ::vaultdb::Schema();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::Schema::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Schema =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSchema}, {
      &protobuf_vaultdb_2eproto::scc_info_FieldDesc.base,}};

static void InitDefaultsSortDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_SortDef_default_instance_;
    new (ptr) ::vaultdb::SortDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::SortDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SortDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSortDef}, {}};

static void InitDefaultsTableQueryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_TableQueryRequest_default_instance_;
    new (ptr) ::vaultdb::TableQueryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::TableQueryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TableQueryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTableQueryRequest}, {}};

static void InitDefaultsTableQueryResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vaultdb::_TableQueryResponse_default_instance_;
    new (ptr) ::vaultdb::TableQueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vaultdb::TableQueryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TableQueryResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTableQueryResponse}, {
      &protobuf_vaultdb_2eproto::scc_info_Schema.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CoaleseTablesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CoaleseTablesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetControlFlowColumnRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetControlFlowColumnResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlFlowColumn.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RepartitionStepTwoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RepartitionStepTwoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RepartitionStepOneRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableID.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RepartitionStepOneResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SendTableRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SendTableResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KFilterRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KFilterResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KJoinRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KJoinResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupByDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KAggregateRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KAggregateResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JoinColID.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JoinDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KSortRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KSortResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeneralizeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeneralizeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerHostInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPeerHostsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPeerHostsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DBMSQueryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DBMSQueryResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NumHostsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NumHostResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DBQueryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DBQueryResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_schema.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableStream.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Expr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Table.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TuplePage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FieldDesc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Schema.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SortDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableQueryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableQueryResponse.base);
}

::google::protobuf::Metadata file_level_metadata[48];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::CoaleseTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::CoaleseTablesRequest, tablefragments_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::CoaleseTablesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::CoaleseTablesResponse, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GetControlFlowColumnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GetControlFlowColumnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GetControlFlowColumnResponse, cf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::ControlFlowColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::ControlFlowColumn, cfid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RepartitionStepTwoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RepartitionStepTwoRequest, tablefragments_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RepartitionStepTwoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RepartitionStepTwoResponse, remoterepartitionids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RepartitionStepOneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RepartitionStepOneRequest, tableid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableID, dbname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableID, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableID, hostnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableID, tableid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RepartitionStepOneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RepartitionStepOneResponse, remoterepartitionids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableRequest, is_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableRequest, schema_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableRequest, num_tuples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableRequest, size_of_tuple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableRequest, num_tuple_pages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableRequest, page_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableRequest, page_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SendTableResponse, tableid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KFilterRequest, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KFilterRequest, expr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KFilterResponse, tid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KJoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KJoinRequest, left_tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KJoinRequest, right_tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KJoinRequest, def_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KJoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KJoinResponse, tid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GroupByDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GroupByDef, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GroupByDef, col_no_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KAggregateRequest, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KAggregateRequest, def_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KAggregateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KAggregateResponse, tid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::JoinColID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::JoinColID, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::JoinColID, col_no_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::JoinDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::JoinDef, l_col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::JoinDef, r_col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::JoinDef, project_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::JoinDef, project_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KSortRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KSortRequest, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KSortRequest, sortdef_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KSortResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::KSortResponse, tid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GeneralizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GeneralizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::PeerHostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::PeerHostInfo, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::PeerHostInfo, hostnum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GetPeerHostsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GetPeerHostsRequest, hostnames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::GetPeerHostsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBMSQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBMSQueryRequest, dbname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBMSQueryRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBMSQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBMSQueryResponse, tableid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RegisterRequest, hostname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::RegisterResponse, host_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::NumHostsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::NumHostResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::NumHostResp, num_hosts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBQueryRequest, query_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBQueryRequest, dbname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::DBQueryResponse, db_response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableResponse, t_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::schema, q_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableStream, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableStream, page_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableStream, page_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Expr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Expr, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Expr, colno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Expr, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Expr, intfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Expr, charfield_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Table, num_tuple_pages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Table, num_tuples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Table, size_of_tuple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Table, schema_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TuplePage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TuplePage, page_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TuplePage, page_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::FieldDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::FieldDesc, field_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::FieldDesc, col_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::FieldDesc, field_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Schema, num_fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::Schema, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SortDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SortDef, colno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::SortDef, ascending_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryRequest, dbname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryResponse, is_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryResponse, schema_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryResponse, num_tuples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryResponse, size_of_tuple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryResponse, num_tuple_pages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryResponse, page_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vaultdb::TableQueryResponse, page_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vaultdb::CoaleseTablesRequest)},
  { 6, -1, sizeof(::vaultdb::CoaleseTablesResponse)},
  { 12, -1, sizeof(::vaultdb::GetControlFlowColumnRequest)},
  { 17, -1, sizeof(::vaultdb::GetControlFlowColumnResponse)},
  { 23, -1, sizeof(::vaultdb::ControlFlowColumn)},
  { 29, -1, sizeof(::vaultdb::RepartitionStepTwoRequest)},
  { 35, -1, sizeof(::vaultdb::RepartitionStepTwoResponse)},
  { 41, -1, sizeof(::vaultdb::RepartitionStepOneRequest)},
  { 47, -1, sizeof(::vaultdb::TableID)},
  { 56, -1, sizeof(::vaultdb::RepartitionStepOneResponse)},
  { 62, -1, sizeof(::vaultdb::SendTableRequest)},
  { 74, -1, sizeof(::vaultdb::SendTableResponse)},
  { 80, -1, sizeof(::vaultdb::KFilterRequest)},
  { 87, -1, sizeof(::vaultdb::KFilterResponse)},
  { 93, -1, sizeof(::vaultdb::KJoinRequest)},
  { 101, -1, sizeof(::vaultdb::KJoinResponse)},
  { 107, -1, sizeof(::vaultdb::GroupByDef)},
  { 114, -1, sizeof(::vaultdb::KAggregateRequest)},
  { 121, -1, sizeof(::vaultdb::KAggregateResponse)},
  { 127, -1, sizeof(::vaultdb::JoinColID)},
  { 134, -1, sizeof(::vaultdb::JoinDef)},
  { 143, -1, sizeof(::vaultdb::KSortRequest)},
  { 150, -1, sizeof(::vaultdb::KSortResponse)},
  { 156, -1, sizeof(::vaultdb::GeneralizeRequest)},
  { 161, -1, sizeof(::vaultdb::GeneralizeResponse)},
  { 166, -1, sizeof(::vaultdb::PeerHostInfo)},
  { 173, -1, sizeof(::vaultdb::GetPeerHostsRequest)},
  { 179, -1, sizeof(::vaultdb::GetPeerHostsResponse)},
  { 184, -1, sizeof(::vaultdb::DBMSQueryRequest)},
  { 191, -1, sizeof(::vaultdb::DBMSQueryResponse)},
  { 197, -1, sizeof(::vaultdb::RegisterRequest)},
  { 203, -1, sizeof(::vaultdb::RegisterResponse)},
  { 209, -1, sizeof(::vaultdb::NumHostsRequest)},
  { 214, -1, sizeof(::vaultdb::NumHostResp)},
  { 220, -1, sizeof(::vaultdb::DBQueryRequest)},
  { 227, -1, sizeof(::vaultdb::DBQueryResponse)},
  { 233, -1, sizeof(::vaultdb::TableRequest)},
  { 238, -1, sizeof(::vaultdb::TableResponse)},
  { 244, -1, sizeof(::vaultdb::schema)},
  { 250, -1, sizeof(::vaultdb::TableStream)},
  { 258, -1, sizeof(::vaultdb::Expr)},
  { 268, -1, sizeof(::vaultdb::Table)},
  { 277, -1, sizeof(::vaultdb::TuplePage)},
  { 284, -1, sizeof(::vaultdb::FieldDesc)},
  { 292, -1, sizeof(::vaultdb::Schema)},
  { 299, -1, sizeof(::vaultdb::SortDef)},
  { 306, -1, sizeof(::vaultdb::TableQueryRequest)},
  { 313, -1, sizeof(::vaultdb::TableQueryResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_CoaleseTablesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_CoaleseTablesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_GetControlFlowColumnRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_GetControlFlowColumnResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_ControlFlowColumn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_RepartitionStepTwoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_RepartitionStepTwoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_RepartitionStepOneRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_TableID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_RepartitionStepOneResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_SendTableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_SendTableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_KFilterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_KFilterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_KJoinRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_KJoinResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_GroupByDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_KAggregateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_KAggregateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_JoinColID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_JoinDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_KSortRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_KSortResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_GeneralizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_GeneralizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_PeerHostInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_GetPeerHostsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_GetPeerHostsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_DBMSQueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_DBMSQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_RegisterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_RegisterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_NumHostsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_NumHostResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_DBQueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_DBQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_TableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_TableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_schema_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_TableStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_Expr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_TuplePage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_FieldDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_Schema_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_SortDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_TableQueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vaultdb::_TableQueryResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "vaultdb.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 48);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rvaultdb.proto\022\007vaultdb\"@\n\024CoaleseTable"
      "sRequest\022(\n\016tablefragments\030\001 \003(\0132\020.vault"
      "db.TableID\"5\n\025CoaleseTablesResponse\022\034\n\002i"
      "d\030\001 \001(\0132\020.vaultdb.TableID\"\035\n\033GetControlF"
      "lowColumnRequest\"F\n\034GetControlFlowColumn"
      "Response\022&\n\002cf\030\001 \001(\0132\032.vaultdb.ControlFl"
      "owColumn\"!\n\021ControlFlowColumn\022\014\n\004cfid\030\001 "
      "\001(\005\"E\n\031RepartitionStepTwoRequest\022(\n\016tabl"
      "efragments\030\001 \003(\0132\020.vaultdb.TableID\"L\n\032Re"
      "partitionStepTwoResponse\022.\n\024remoteRepart"
      "itionIDs\030\001 \003(\0132\020.vaultdb.TableID\">\n\031Repa"
      "rtitionStepOneRequest\022!\n\007tableid\030\001 \001(\0132\020"
      ".vaultdb.TableID\"J\n\007TableID\022\016\n\006dbname\030\001 "
      "\001(\t\022\r\n\005query\030\002 \001(\t\022\017\n\007hostnum\030\003 \001(\005\022\017\n\007t"
      "ableid\030\004 \001(\005\"L\n\032RepartitionStepOneRespon"
      "se\022.\n\024remoteRepartitionIDs\030\001 \003(\0132\020.vault"
      "db.TableID\"\251\001\n\020SendTableRequest\022\021\n\tis_he"
      "ader\030\002 \001(\010\022\037\n\006schema\030\003 \001(\0132\017.vaultdb.Sch"
      "ema\022\022\n\nnum_tuples\030\004 \001(\005\022\025\n\rsize_of_tuple"
      "\030\005 \001(\005\022\027\n\017num_tuple_pages\030\006 \001(\005\022\017\n\007page_"
      "no\030\007 \001(\005\022\014\n\004page\030\010 \001(\014\"$\n\021SendTableRespo"
      "nse\022\017\n\007tableID\030\001 \001(\005\"L\n\016KFilterRequest\022\035"
      "\n\003tid\030\001 \001(\0132\020.vaultdb.TableID\022\033\n\004expr\030\002 "
      "\001(\0132\r.vaultdb.Expr\"0\n\017KFilterResponse\022\035\n"
      "\003tid\030\001 \001(\0132\020.vaultdb.TableID\"v\n\014KJoinReq"
      "uest\022\"\n\010left_tid\030\001 \001(\0132\020.vaultdb.TableID"
      "\022#\n\tright_tid\030\002 \001(\0132\020.vaultdb.TableID\022\035\n"
      "\003def\030\003 \001(\0132\020.vaultdb.JoinDef\".\n\rKJoinRes"
      "ponse\022\035\n\003tid\030\001 \001(\0132\020.vaultdb.TableID\"\200\001\n"
      "\nGroupByDef\022-\n\004type\030\001 \001(\0162\037.vaultdb.Grou"
      "pByDef.GroupByType\022\016\n\006col_no\030\002 \001(\005\"3\n\013Gr"
      "oupByType\022\017\n\013UNSUPPORTED\020\000\022\010\n\004MINX\020\001\022\t\n\005"
      "COUNT\020\002\"T\n\021KAggregateRequest\022\035\n\003tid\030\001 \001("
      "\0132\020.vaultdb.TableID\022 \n\003def\030\002 \001(\0132\023.vault"
      "db.GroupByDef\"3\n\022KAggregateResponse\022\035\n\003t"
      "id\030\001 \001(\0132\020.vaultdb.TableID\"o\n\tJoinColID\022"
      "-\n\004side\030\001 \001(\0162\037.vaultdb.JoinColID.Relati"
      "onSide\022\016\n\006col_no\030\002 \001(\005\"#\n\014RelationSide\022\010"
      "\n\004LEFT\020\000\022\t\n\005RIGHT\020\001\"f\n\007JoinDef\022\r\n\005l_col\030"
      "\001 \001(\005\022\r\n\005r_col\030\002 \001(\005\022\023\n\013project_len\030\003 \001("
      "\005\022(\n\014project_list\030\004 \003(\0132\022.vaultdb.JoinCo"
      "lID\"P\n\014KSortRequest\022\035\n\003tid\030\001 \001(\0132\020.vault"
      "db.TableID\022!\n\007sortdef\030\002 \001(\0132\020.vaultdb.So"
      "rtDef\".\n\rKSortResponse\022\035\n\003tid\030\001 \001(\0132\020.va"
      "ultdb.TableID\"\023\n\021GeneralizeRequest\"\024\n\022Ge"
      "neralizeResponse\"1\n\014PeerHostInfo\022\020\n\010host"
      "name\030\001 \001(\t\022\017\n\007hostnum\030\002 \001(\005\"\?\n\023GetPeerHo"
      "stsRequest\022(\n\thostnames\030\001 \003(\0132\025.vaultdb."
      "PeerHostInfo\"\026\n\024GetPeerHostsResponse\"1\n\020"
      "DBMSQueryRequest\022\016\n\006dbname\030\001 \001(\t\022\r\n\005quer"
      "y\030\002 \001(\t\"6\n\021DBMSQueryResponse\022!\n\007tableId\030"
      "\001 \001(\0132\020.vaultdb.TableID\"#\n\017RegisterReque"
      "st\022\020\n\010hostname\030\001 \001(\t\"$\n\020RegisterResponse"
      "\022\020\n\010host_num\030\001 \001(\005\"\021\n\017NumHostsRequest\" \n"
      "\013NumHostResp\022\021\n\tnum_hosts\030\001 \001(\005\"6\n\016DBQue"
      "ryRequest\022\024\n\014query_string\030\001 \001(\t\022\016\n\006dbnam"
      "e\030\002 \001(\t\"&\n\017DBQueryResponse\022\023\n\013db_respons"
      "e\030\001 \001(\t\"\016\n\014TableRequest\"*\n\rTableResponse"
      "\022\031\n\001t\030\001 \001(\0132\016.vaultdb.Table\"#\n\006schema\022\031\n"
      "\001q\030\002 \003(\0132\016.vaultdb.Table\"G\n\013TableStream\022"
      "\031\n\001t\030\001 \001(\0132\016.vaultdb.Table\022\017\n\007page_no\030\003 "
      "\001(\005\022\014\n\004page\030\004 \001(\014\"\261\001\n\004Expr\022$\n\004type\030\001 \001(\016"
      "2\026.vaultdb.Expr.ExprType\022\r\n\005colno\030\002 \001(\005\022"
      " \n\004desc\030\003 \001(\0132\022.vaultdb.FieldDesc\022\020\n\010int"
      "field\030\004 \001(\005\022\021\n\tcharfield\030\005 \001(\t\"-\n\010ExprTy"
      "pe\022\024\n\020UNSUPPORTED_EXPR\020\000\022\013\n\007EQ_EXPR\020\001\"[\n"
      "\005Table\022\027\n\017num_tuple_pages\030\001 \001(\005\022\022\n\nnum_t"
      "uples\030\002 \001(\005\022\025\n\rsize_of_tuple\030\003 \001(\005\022\016\n\006sc"
      "hema\030\004 \001(\014\"*\n\tTuplePage\022\017\n\007page_no\030\001 \001(\005"
      "\022\014\n\004page\030\002 \001(\014\"\227\001\n\tFieldDesc\022\022\n\nfield_na"
      "me\030\001 \001(\t\022\016\n\006col_no\030\002 \001(\005\0220\n\nfield_type\030\003"
      " \001(\0162\034.vaultdb.FieldDesc.FieldType\"4\n\tFi"
      "eldType\022\017\n\013UNSUPPORTED\020\000\022\r\n\tFIXEDCHAR\020\001\022"
      "\007\n\003INT\020\002\"\?\n\006Schema\022\022\n\nnum_fields\030\001 \001(\005\022!"
      "\n\005field\030\002 \003(\0132\022.vaultdb.FieldDesc\"+\n\007Sor"
      "tDef\022\r\n\005colno\030\001 \001(\005\022\021\n\tascending\030\002 \001(\010\"2"
      "\n\021TableQueryRequest\022\016\n\006dbname\030\001 \001(\t\022\r\n\005q"
      "uery\030\002 \001(\t\"\253\001\n\022TableQueryResponse\022\021\n\tis_"
      "header\030\002 \001(\010\022\037\n\006schema\030\003 \001(\0132\017.vaultdb.S"
      "chema\022\022\n\nnum_tuples\030\004 \001(\005\022\025\n\rsize_of_tup"
      "le\030\005 \001(\005\022\027\n\017num_tuple_pages\030\006 \001(\005\022\017\n\007pag"
      "e_no\030\007 \001(\005\022\014\n\004page\030\010 \001(\0142\336\001\n\020VaultDBOper"
      "ators\022>\n\007DBQuery\022\027.vaultdb.DBQueryReques"
      "t\032\030.vaultdb.DBQueryResponse\"\000\022A\n\016GetTabl"
      "eStream\022\025.vaultdb.TableRequest\032\024.vaultdb"
      ".TableStream\"\0000\001\022G\n\010GetTable\022\032.vaultdb.T"
      "ableQueryRequest\032\033.vaultdb.TableQueryRes"
      "ponse\"\0000\0012\366\001\n\014HonestBroker\022<\n\010NumHosts\022\030"
      ".vaultdb.NumHostsRequest\032\024.vaultdb.NumHo"
      "stResp\"\000\022A\n\010Register\022\030.vaultdb.RegisterR"
      "equest\032\031.vaultdb.RegisterResponse\"\000\022e\n\024G"
      "etControlFlowColumn\022$.vaultdb.GetControl"
      "FlowColumnRequest\032%.vaultdb.GetControlFl"
      "owColumnResponse\"\0002\303\006\n\tDataOwner\022D\n\tDBMS"
      "Query\022\031.vaultdb.DBMSQueryRequest\032\032.vault"
      "db.DBMSQueryResponse\"\000\022M\n\014GetPeerHosts\022\034"
      ".vaultdb.GetPeerHostsRequest\032\035.vaultdb.G"
      "etPeerHostsResponse\"\000\022>\n\007KFilter\022\027.vault"
      "db.KFilterRequest\032\030.vaultdb.KFilterRespo"
      "nse\"\000\0228\n\005KJoin\022\025.vaultdb.KJoinRequest\032\026."
      "vaultdb.KJoinResponse\"\000\0228\n\005KSort\022\025.vault"
      "db.KSortRequest\032\026.vaultdb.KSortResponse\""
      "\000\022G\n\nKAggregate\022\032.vaultdb.KAggregateRequ"
      "est\032\033.vaultdb.KAggregateResponse\"\000\022G\n\nGe"
      "neralize\022\032.vaultdb.GeneralizeRequest\032\033.v"
      "aultdb.GeneralizeResponse\"\000\022F\n\tSendTable"
      "\022\031.vaultdb.SendTableRequest\032\032.vaultdb.Se"
      "ndTableResponse\"\000(\001\022_\n\022RepartitionStepOn"
      "e\022\".vaultdb.RepartitionStepOneRequest\032#."
      "vaultdb.RepartitionStepOneResponse\"\000\022_\n\022"
      "RepartitionStepTwo\022\".vaultdb.Repartition"
      "StepTwoRequest\032#.vaultdb.RepartitionStep"
      "TwoResponse\"\000\022Q\n\016CoalesceTables\022\035.vaultd"
      "b.CoaleseTablesRequest\032\036.vaultdb.Coalese"
      "TablesResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4584);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vaultdb.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vaultdb_2eproto
namespace vaultdb {
const ::google::protobuf::EnumDescriptor* GroupByDef_GroupByType_descriptor() {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vaultdb_2eproto::file_level_enum_descriptors[0];
}
bool GroupByDef_GroupByType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GroupByDef_GroupByType GroupByDef::UNSUPPORTED;
const GroupByDef_GroupByType GroupByDef::MINX;
const GroupByDef_GroupByType GroupByDef::COUNT;
const GroupByDef_GroupByType GroupByDef::GroupByType_MIN;
const GroupByDef_GroupByType GroupByDef::GroupByType_MAX;
const int GroupByDef::GroupByType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* JoinColID_RelationSide_descriptor() {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vaultdb_2eproto::file_level_enum_descriptors[1];
}
bool JoinColID_RelationSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JoinColID_RelationSide JoinColID::LEFT;
const JoinColID_RelationSide JoinColID::RIGHT;
const JoinColID_RelationSide JoinColID::RelationSide_MIN;
const JoinColID_RelationSide JoinColID::RelationSide_MAX;
const int JoinColID::RelationSide_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Expr_ExprType_descriptor() {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vaultdb_2eproto::file_level_enum_descriptors[2];
}
bool Expr_ExprType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Expr_ExprType Expr::UNSUPPORTED_EXPR;
const Expr_ExprType Expr::EQ_EXPR;
const Expr_ExprType Expr::ExprType_MIN;
const Expr_ExprType Expr::ExprType_MAX;
const int Expr::ExprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FieldDesc_FieldType_descriptor() {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vaultdb_2eproto::file_level_enum_descriptors[3];
}
bool FieldDesc_FieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FieldDesc_FieldType FieldDesc::UNSUPPORTED;
const FieldDesc_FieldType FieldDesc::FIXEDCHAR;
const FieldDesc_FieldType FieldDesc::INT;
const FieldDesc_FieldType FieldDesc::FieldType_MIN;
const FieldDesc_FieldType FieldDesc::FieldType_MAX;
const int FieldDesc::FieldType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CoaleseTablesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoaleseTablesRequest::kTablefragmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoaleseTablesRequest::CoaleseTablesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_CoaleseTablesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.CoaleseTablesRequest)
}
CoaleseTablesRequest::CoaleseTablesRequest(const CoaleseTablesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tablefragments_(from.tablefragments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.CoaleseTablesRequest)
}

void CoaleseTablesRequest::SharedCtor() {
}

CoaleseTablesRequest::~CoaleseTablesRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.CoaleseTablesRequest)
  SharedDtor();
}

void CoaleseTablesRequest::SharedDtor() {
}

void CoaleseTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CoaleseTablesRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoaleseTablesRequest& CoaleseTablesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_CoaleseTablesRequest.base);
  return *internal_default_instance();
}


void CoaleseTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.CoaleseTablesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tablefragments_.Clear();
  _internal_metadata_.Clear();
}

bool CoaleseTablesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.CoaleseTablesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vaultdb.TableID tablefragments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tablefragments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.CoaleseTablesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.CoaleseTablesRequest)
  return false;
#undef DO_
}

void CoaleseTablesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.CoaleseTablesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.TableID tablefragments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tablefragments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tablefragments(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.CoaleseTablesRequest)
}

::google::protobuf::uint8* CoaleseTablesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.CoaleseTablesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.TableID tablefragments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tablefragments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tablefragments(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.CoaleseTablesRequest)
  return target;
}

size_t CoaleseTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.CoaleseTablesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vaultdb.TableID tablefragments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tablefragments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tablefragments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoaleseTablesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.CoaleseTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CoaleseTablesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoaleseTablesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.CoaleseTablesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.CoaleseTablesRequest)
    MergeFrom(*source);
  }
}

void CoaleseTablesRequest::MergeFrom(const CoaleseTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.CoaleseTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tablefragments_.MergeFrom(from.tablefragments_);
}

void CoaleseTablesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.CoaleseTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoaleseTablesRequest::CopyFrom(const CoaleseTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.CoaleseTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoaleseTablesRequest::IsInitialized() const {
  return true;
}

void CoaleseTablesRequest::Swap(CoaleseTablesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoaleseTablesRequest::InternalSwap(CoaleseTablesRequest* other) {
  using std::swap;
  CastToBase(&tablefragments_)->InternalSwap(CastToBase(&other->tablefragments_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CoaleseTablesRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CoaleseTablesResponse::InitAsDefaultInstance() {
  ::vaultdb::_CoaleseTablesResponse_default_instance_._instance.get_mutable()->id_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoaleseTablesResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoaleseTablesResponse::CoaleseTablesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_CoaleseTablesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.CoaleseTablesResponse)
}
CoaleseTablesResponse::CoaleseTablesResponse(const CoaleseTablesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::vaultdb::TableID(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.CoaleseTablesResponse)
}

void CoaleseTablesResponse::SharedCtor() {
  id_ = NULL;
}

CoaleseTablesResponse::~CoaleseTablesResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.CoaleseTablesResponse)
  SharedDtor();
}

void CoaleseTablesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void CoaleseTablesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CoaleseTablesResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoaleseTablesResponse& CoaleseTablesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_CoaleseTablesResponse.base);
  return *internal_default_instance();
}


void CoaleseTablesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.CoaleseTablesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool CoaleseTablesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.CoaleseTablesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.CoaleseTablesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.CoaleseTablesResponse)
  return false;
#undef DO_
}

void CoaleseTablesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.CoaleseTablesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.CoaleseTablesResponse)
}

::google::protobuf::uint8* CoaleseTablesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.CoaleseTablesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.CoaleseTablesResponse)
  return target;
}

size_t CoaleseTablesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.CoaleseTablesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoaleseTablesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.CoaleseTablesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CoaleseTablesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoaleseTablesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.CoaleseTablesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.CoaleseTablesResponse)
    MergeFrom(*source);
  }
}

void CoaleseTablesResponse::MergeFrom(const CoaleseTablesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.CoaleseTablesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::vaultdb::TableID::MergeFrom(from.id());
  }
}

void CoaleseTablesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.CoaleseTablesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoaleseTablesResponse::CopyFrom(const CoaleseTablesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.CoaleseTablesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoaleseTablesResponse::IsInitialized() const {
  return true;
}

void CoaleseTablesResponse::Swap(CoaleseTablesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoaleseTablesResponse::InternalSwap(CoaleseTablesResponse* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CoaleseTablesResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetControlFlowColumnRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetControlFlowColumnRequest::GetControlFlowColumnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_GetControlFlowColumnRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.GetControlFlowColumnRequest)
}
GetControlFlowColumnRequest::GetControlFlowColumnRequest(const GetControlFlowColumnRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.GetControlFlowColumnRequest)
}

void GetControlFlowColumnRequest::SharedCtor() {
}

GetControlFlowColumnRequest::~GetControlFlowColumnRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.GetControlFlowColumnRequest)
  SharedDtor();
}

void GetControlFlowColumnRequest::SharedDtor() {
}

void GetControlFlowColumnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetControlFlowColumnRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetControlFlowColumnRequest& GetControlFlowColumnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_GetControlFlowColumnRequest.base);
  return *internal_default_instance();
}


void GetControlFlowColumnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.GetControlFlowColumnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetControlFlowColumnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.GetControlFlowColumnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.GetControlFlowColumnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.GetControlFlowColumnRequest)
  return false;
#undef DO_
}

void GetControlFlowColumnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.GetControlFlowColumnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.GetControlFlowColumnRequest)
}

::google::protobuf::uint8* GetControlFlowColumnRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.GetControlFlowColumnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.GetControlFlowColumnRequest)
  return target;
}

size_t GetControlFlowColumnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.GetControlFlowColumnRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetControlFlowColumnRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.GetControlFlowColumnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetControlFlowColumnRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetControlFlowColumnRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.GetControlFlowColumnRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.GetControlFlowColumnRequest)
    MergeFrom(*source);
  }
}

void GetControlFlowColumnRequest::MergeFrom(const GetControlFlowColumnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.GetControlFlowColumnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetControlFlowColumnRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.GetControlFlowColumnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetControlFlowColumnRequest::CopyFrom(const GetControlFlowColumnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.GetControlFlowColumnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetControlFlowColumnRequest::IsInitialized() const {
  return true;
}

void GetControlFlowColumnRequest::Swap(GetControlFlowColumnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetControlFlowColumnRequest::InternalSwap(GetControlFlowColumnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetControlFlowColumnRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetControlFlowColumnResponse::InitAsDefaultInstance() {
  ::vaultdb::_GetControlFlowColumnResponse_default_instance_._instance.get_mutable()->cf_ = const_cast< ::vaultdb::ControlFlowColumn*>(
      ::vaultdb::ControlFlowColumn::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetControlFlowColumnResponse::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetControlFlowColumnResponse::GetControlFlowColumnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_GetControlFlowColumnResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.GetControlFlowColumnResponse)
}
GetControlFlowColumnResponse::GetControlFlowColumnResponse(const GetControlFlowColumnResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cf()) {
    cf_ = new ::vaultdb::ControlFlowColumn(*from.cf_);
  } else {
    cf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.GetControlFlowColumnResponse)
}

void GetControlFlowColumnResponse::SharedCtor() {
  cf_ = NULL;
}

GetControlFlowColumnResponse::~GetControlFlowColumnResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.GetControlFlowColumnResponse)
  SharedDtor();
}

void GetControlFlowColumnResponse::SharedDtor() {
  if (this != internal_default_instance()) delete cf_;
}

void GetControlFlowColumnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetControlFlowColumnResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetControlFlowColumnResponse& GetControlFlowColumnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_GetControlFlowColumnResponse.base);
  return *internal_default_instance();
}


void GetControlFlowColumnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.GetControlFlowColumnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cf_ != NULL) {
    delete cf_;
  }
  cf_ = NULL;
  _internal_metadata_.Clear();
}

bool GetControlFlowColumnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.GetControlFlowColumnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.ControlFlowColumn cf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.GetControlFlowColumnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.GetControlFlowColumnResponse)
  return false;
#undef DO_
}

void GetControlFlowColumnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.GetControlFlowColumnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.ControlFlowColumn cf = 1;
  if (this->has_cf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_cf(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.GetControlFlowColumnResponse)
}

::google::protobuf::uint8* GetControlFlowColumnResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.GetControlFlowColumnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.ControlFlowColumn cf = 1;
  if (this->has_cf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_cf(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.GetControlFlowColumnResponse)
  return target;
}

size_t GetControlFlowColumnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.GetControlFlowColumnResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.ControlFlowColumn cf = 1;
  if (this->has_cf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cf_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetControlFlowColumnResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.GetControlFlowColumnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetControlFlowColumnResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetControlFlowColumnResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.GetControlFlowColumnResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.GetControlFlowColumnResponse)
    MergeFrom(*source);
  }
}

void GetControlFlowColumnResponse::MergeFrom(const GetControlFlowColumnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.GetControlFlowColumnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cf()) {
    mutable_cf()->::vaultdb::ControlFlowColumn::MergeFrom(from.cf());
  }
}

void GetControlFlowColumnResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.GetControlFlowColumnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetControlFlowColumnResponse::CopyFrom(const GetControlFlowColumnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.GetControlFlowColumnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetControlFlowColumnResponse::IsInitialized() const {
  return true;
}

void GetControlFlowColumnResponse::Swap(GetControlFlowColumnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetControlFlowColumnResponse::InternalSwap(GetControlFlowColumnResponse* other) {
  using std::swap;
  swap(cf_, other->cf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetControlFlowColumnResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlFlowColumn::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlFlowColumn::kCfidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlFlowColumn::ControlFlowColumn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_ControlFlowColumn.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.ControlFlowColumn)
}
ControlFlowColumn::ControlFlowColumn(const ControlFlowColumn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cfid_ = from.cfid_;
  // @@protoc_insertion_point(copy_constructor:vaultdb.ControlFlowColumn)
}

void ControlFlowColumn::SharedCtor() {
  cfid_ = 0;
}

ControlFlowColumn::~ControlFlowColumn() {
  // @@protoc_insertion_point(destructor:vaultdb.ControlFlowColumn)
  SharedDtor();
}

void ControlFlowColumn::SharedDtor() {
}

void ControlFlowColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlFlowColumn::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlFlowColumn& ControlFlowColumn::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_ControlFlowColumn.base);
  return *internal_default_instance();
}


void ControlFlowColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.ControlFlowColumn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cfid_ = 0;
  _internal_metadata_.Clear();
}

bool ControlFlowColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.ControlFlowColumn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.ControlFlowColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.ControlFlowColumn)
  return false;
#undef DO_
}

void ControlFlowColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.ControlFlowColumn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cfid = 1;
  if (this->cfid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cfid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.ControlFlowColumn)
}

::google::protobuf::uint8* ControlFlowColumn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.ControlFlowColumn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cfid = 1;
  if (this->cfid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cfid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.ControlFlowColumn)
  return target;
}

size_t ControlFlowColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.ControlFlowColumn)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 cfid = 1;
  if (this->cfid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cfid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlFlowColumn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.ControlFlowColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlFlowColumn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlFlowColumn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.ControlFlowColumn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.ControlFlowColumn)
    MergeFrom(*source);
  }
}

void ControlFlowColumn::MergeFrom(const ControlFlowColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.ControlFlowColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cfid() != 0) {
    set_cfid(from.cfid());
  }
}

void ControlFlowColumn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.ControlFlowColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlFlowColumn::CopyFrom(const ControlFlowColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.ControlFlowColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFlowColumn::IsInitialized() const {
  return true;
}

void ControlFlowColumn::Swap(ControlFlowColumn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlFlowColumn::InternalSwap(ControlFlowColumn* other) {
  using std::swap;
  swap(cfid_, other->cfid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlFlowColumn::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RepartitionStepTwoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RepartitionStepTwoRequest::kTablefragmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RepartitionStepTwoRequest::RepartitionStepTwoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_RepartitionStepTwoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.RepartitionStepTwoRequest)
}
RepartitionStepTwoRequest::RepartitionStepTwoRequest(const RepartitionStepTwoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tablefragments_(from.tablefragments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.RepartitionStepTwoRequest)
}

void RepartitionStepTwoRequest::SharedCtor() {
}

RepartitionStepTwoRequest::~RepartitionStepTwoRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.RepartitionStepTwoRequest)
  SharedDtor();
}

void RepartitionStepTwoRequest::SharedDtor() {
}

void RepartitionStepTwoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RepartitionStepTwoRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RepartitionStepTwoRequest& RepartitionStepTwoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_RepartitionStepTwoRequest.base);
  return *internal_default_instance();
}


void RepartitionStepTwoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.RepartitionStepTwoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tablefragments_.Clear();
  _internal_metadata_.Clear();
}

bool RepartitionStepTwoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.RepartitionStepTwoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vaultdb.TableID tablefragments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tablefragments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.RepartitionStepTwoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.RepartitionStepTwoRequest)
  return false;
#undef DO_
}

void RepartitionStepTwoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.RepartitionStepTwoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.TableID tablefragments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tablefragments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tablefragments(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.RepartitionStepTwoRequest)
}

::google::protobuf::uint8* RepartitionStepTwoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.RepartitionStepTwoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.TableID tablefragments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tablefragments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tablefragments(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.RepartitionStepTwoRequest)
  return target;
}

size_t RepartitionStepTwoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.RepartitionStepTwoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vaultdb.TableID tablefragments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tablefragments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tablefragments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepartitionStepTwoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.RepartitionStepTwoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RepartitionStepTwoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RepartitionStepTwoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.RepartitionStepTwoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.RepartitionStepTwoRequest)
    MergeFrom(*source);
  }
}

void RepartitionStepTwoRequest::MergeFrom(const RepartitionStepTwoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.RepartitionStepTwoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tablefragments_.MergeFrom(from.tablefragments_);
}

void RepartitionStepTwoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.RepartitionStepTwoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepartitionStepTwoRequest::CopyFrom(const RepartitionStepTwoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.RepartitionStepTwoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepartitionStepTwoRequest::IsInitialized() const {
  return true;
}

void RepartitionStepTwoRequest::Swap(RepartitionStepTwoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RepartitionStepTwoRequest::InternalSwap(RepartitionStepTwoRequest* other) {
  using std::swap;
  CastToBase(&tablefragments_)->InternalSwap(CastToBase(&other->tablefragments_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RepartitionStepTwoRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RepartitionStepTwoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RepartitionStepTwoResponse::kRemoteRepartitionIDsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RepartitionStepTwoResponse::RepartitionStepTwoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_RepartitionStepTwoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.RepartitionStepTwoResponse)
}
RepartitionStepTwoResponse::RepartitionStepTwoResponse(const RepartitionStepTwoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      remoterepartitionids_(from.remoterepartitionids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.RepartitionStepTwoResponse)
}

void RepartitionStepTwoResponse::SharedCtor() {
}

RepartitionStepTwoResponse::~RepartitionStepTwoResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.RepartitionStepTwoResponse)
  SharedDtor();
}

void RepartitionStepTwoResponse::SharedDtor() {
}

void RepartitionStepTwoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RepartitionStepTwoResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RepartitionStepTwoResponse& RepartitionStepTwoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_RepartitionStepTwoResponse.base);
  return *internal_default_instance();
}


void RepartitionStepTwoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.RepartitionStepTwoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remoterepartitionids_.Clear();
  _internal_metadata_.Clear();
}

bool RepartitionStepTwoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.RepartitionStepTwoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vaultdb.TableID remoteRepartitionIDs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_remoterepartitionids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.RepartitionStepTwoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.RepartitionStepTwoResponse)
  return false;
#undef DO_
}

void RepartitionStepTwoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.RepartitionStepTwoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.TableID remoteRepartitionIDs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->remoterepartitionids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->remoterepartitionids(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.RepartitionStepTwoResponse)
}

::google::protobuf::uint8* RepartitionStepTwoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.RepartitionStepTwoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.TableID remoteRepartitionIDs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->remoterepartitionids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->remoterepartitionids(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.RepartitionStepTwoResponse)
  return target;
}

size_t RepartitionStepTwoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.RepartitionStepTwoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vaultdb.TableID remoteRepartitionIDs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->remoterepartitionids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->remoterepartitionids(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepartitionStepTwoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.RepartitionStepTwoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RepartitionStepTwoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RepartitionStepTwoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.RepartitionStepTwoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.RepartitionStepTwoResponse)
    MergeFrom(*source);
  }
}

void RepartitionStepTwoResponse::MergeFrom(const RepartitionStepTwoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.RepartitionStepTwoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remoterepartitionids_.MergeFrom(from.remoterepartitionids_);
}

void RepartitionStepTwoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.RepartitionStepTwoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepartitionStepTwoResponse::CopyFrom(const RepartitionStepTwoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.RepartitionStepTwoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepartitionStepTwoResponse::IsInitialized() const {
  return true;
}

void RepartitionStepTwoResponse::Swap(RepartitionStepTwoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RepartitionStepTwoResponse::InternalSwap(RepartitionStepTwoResponse* other) {
  using std::swap;
  CastToBase(&remoterepartitionids_)->InternalSwap(CastToBase(&other->remoterepartitionids_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RepartitionStepTwoResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RepartitionStepOneRequest::InitAsDefaultInstance() {
  ::vaultdb::_RepartitionStepOneRequest_default_instance_._instance.get_mutable()->tableid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RepartitionStepOneRequest::kTableidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RepartitionStepOneRequest::RepartitionStepOneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_RepartitionStepOneRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.RepartitionStepOneRequest)
}
RepartitionStepOneRequest::RepartitionStepOneRequest(const RepartitionStepOneRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tableid()) {
    tableid_ = new ::vaultdb::TableID(*from.tableid_);
  } else {
    tableid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.RepartitionStepOneRequest)
}

void RepartitionStepOneRequest::SharedCtor() {
  tableid_ = NULL;
}

RepartitionStepOneRequest::~RepartitionStepOneRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.RepartitionStepOneRequest)
  SharedDtor();
}

void RepartitionStepOneRequest::SharedDtor() {
  if (this != internal_default_instance()) delete tableid_;
}

void RepartitionStepOneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RepartitionStepOneRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RepartitionStepOneRequest& RepartitionStepOneRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_RepartitionStepOneRequest.base);
  return *internal_default_instance();
}


void RepartitionStepOneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.RepartitionStepOneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tableid_ != NULL) {
    delete tableid_;
  }
  tableid_ = NULL;
  _internal_metadata_.Clear();
}

bool RepartitionStepOneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.RepartitionStepOneRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID tableid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tableid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.RepartitionStepOneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.RepartitionStepOneRequest)
  return false;
#undef DO_
}

void RepartitionStepOneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.RepartitionStepOneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tableid = 1;
  if (this->has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tableid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.RepartitionStepOneRequest)
}

::google::protobuf::uint8* RepartitionStepOneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.RepartitionStepOneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tableid = 1;
  if (this->has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tableid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.RepartitionStepOneRequest)
  return target;
}

size_t RepartitionStepOneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.RepartitionStepOneRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID tableid = 1;
  if (this->has_tableid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tableid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepartitionStepOneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.RepartitionStepOneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RepartitionStepOneRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RepartitionStepOneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.RepartitionStepOneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.RepartitionStepOneRequest)
    MergeFrom(*source);
  }
}

void RepartitionStepOneRequest::MergeFrom(const RepartitionStepOneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.RepartitionStepOneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tableid()) {
    mutable_tableid()->::vaultdb::TableID::MergeFrom(from.tableid());
  }
}

void RepartitionStepOneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.RepartitionStepOneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepartitionStepOneRequest::CopyFrom(const RepartitionStepOneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.RepartitionStepOneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepartitionStepOneRequest::IsInitialized() const {
  return true;
}

void RepartitionStepOneRequest::Swap(RepartitionStepOneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RepartitionStepOneRequest::InternalSwap(RepartitionStepOneRequest* other) {
  using std::swap;
  swap(tableid_, other->tableid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RepartitionStepOneRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableID::kDbnameFieldNumber;
const int TableID::kQueryFieldNumber;
const int TableID::kHostnumFieldNumber;
const int TableID::kTableidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableID::TableID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_TableID.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.TableID)
}
TableID::TableID(const TableID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dbname().size() > 0) {
    dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&hostnum_, &from.hostnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&hostnum_)) + sizeof(tableid_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.TableID)
}

void TableID::SharedCtor() {
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hostnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&hostnum_)) + sizeof(tableid_));
}

TableID::~TableID() {
  // @@protoc_insertion_point(destructor:vaultdb.TableID)
  SharedDtor();
}

void TableID::SharedDtor() {
  dbname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TableID::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableID& TableID::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_TableID.base);
  return *internal_default_instance();
}


void TableID::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.TableID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hostnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&hostnum_)) + sizeof(tableid_));
  _internal_metadata_.Clear();
}

bool TableID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.TableID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dbname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbname().data(), static_cast<int>(this->dbname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.TableID.dbname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.TableID.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hostnum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hostnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tableid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.TableID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.TableID)
  return false;
#undef DO_
}

void TableID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.TableID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dbname = 1;
  if (this->dbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.TableID.dbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dbname(), output);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.TableID.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // int32 hostnum = 3;
  if (this->hostnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hostnum(), output);
  }

  // int32 tableid = 4;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tableid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.TableID)
}

::google::protobuf::uint8* TableID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.TableID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dbname = 1;
  if (this->dbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.TableID.dbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbname(), target);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.TableID.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // int32 hostnum = 3;
  if (this->hostnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hostnum(), target);
  }

  // int32 tableid = 4;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tableid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.TableID)
  return target;
}

size_t TableID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.TableID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dbname = 1;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbname());
  }

  // string query = 2;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // int32 hostnum = 3;
  if (this->hostnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hostnum());
  }

  // int32 tableid = 4;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.TableID)
  GOOGLE_DCHECK_NE(&from, this);
  const TableID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.TableID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.TableID)
    MergeFrom(*source);
  }
}

void TableID::MergeFrom(const TableID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.TableID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dbname().size() > 0) {

    dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.hostnum() != 0) {
    set_hostnum(from.hostnum());
  }
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
}

void TableID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.TableID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableID::CopyFrom(const TableID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.TableID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableID::IsInitialized() const {
  return true;
}

void TableID::Swap(TableID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableID::InternalSwap(TableID* other) {
  using std::swap;
  dbname_.Swap(&other->dbname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hostnum_, other->hostnum_);
  swap(tableid_, other->tableid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TableID::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RepartitionStepOneResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RepartitionStepOneResponse::kRemoteRepartitionIDsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RepartitionStepOneResponse::RepartitionStepOneResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_RepartitionStepOneResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.RepartitionStepOneResponse)
}
RepartitionStepOneResponse::RepartitionStepOneResponse(const RepartitionStepOneResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      remoterepartitionids_(from.remoterepartitionids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.RepartitionStepOneResponse)
}

void RepartitionStepOneResponse::SharedCtor() {
}

RepartitionStepOneResponse::~RepartitionStepOneResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.RepartitionStepOneResponse)
  SharedDtor();
}

void RepartitionStepOneResponse::SharedDtor() {
}

void RepartitionStepOneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RepartitionStepOneResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RepartitionStepOneResponse& RepartitionStepOneResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_RepartitionStepOneResponse.base);
  return *internal_default_instance();
}


void RepartitionStepOneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.RepartitionStepOneResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remoterepartitionids_.Clear();
  _internal_metadata_.Clear();
}

bool RepartitionStepOneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.RepartitionStepOneResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vaultdb.TableID remoteRepartitionIDs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_remoterepartitionids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.RepartitionStepOneResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.RepartitionStepOneResponse)
  return false;
#undef DO_
}

void RepartitionStepOneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.RepartitionStepOneResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.TableID remoteRepartitionIDs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->remoterepartitionids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->remoterepartitionids(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.RepartitionStepOneResponse)
}

::google::protobuf::uint8* RepartitionStepOneResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.RepartitionStepOneResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.TableID remoteRepartitionIDs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->remoterepartitionids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->remoterepartitionids(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.RepartitionStepOneResponse)
  return target;
}

size_t RepartitionStepOneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.RepartitionStepOneResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vaultdb.TableID remoteRepartitionIDs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->remoterepartitionids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->remoterepartitionids(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepartitionStepOneResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.RepartitionStepOneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RepartitionStepOneResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RepartitionStepOneResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.RepartitionStepOneResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.RepartitionStepOneResponse)
    MergeFrom(*source);
  }
}

void RepartitionStepOneResponse::MergeFrom(const RepartitionStepOneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.RepartitionStepOneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remoterepartitionids_.MergeFrom(from.remoterepartitionids_);
}

void RepartitionStepOneResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.RepartitionStepOneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepartitionStepOneResponse::CopyFrom(const RepartitionStepOneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.RepartitionStepOneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepartitionStepOneResponse::IsInitialized() const {
  return true;
}

void RepartitionStepOneResponse::Swap(RepartitionStepOneResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RepartitionStepOneResponse::InternalSwap(RepartitionStepOneResponse* other) {
  using std::swap;
  CastToBase(&remoterepartitionids_)->InternalSwap(CastToBase(&other->remoterepartitionids_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RepartitionStepOneResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendTableRequest::InitAsDefaultInstance() {
  ::vaultdb::_SendTableRequest_default_instance_._instance.get_mutable()->schema_ = const_cast< ::vaultdb::Schema*>(
      ::vaultdb::Schema::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendTableRequest::kIsHeaderFieldNumber;
const int SendTableRequest::kSchemaFieldNumber;
const int SendTableRequest::kNumTuplesFieldNumber;
const int SendTableRequest::kSizeOfTupleFieldNumber;
const int SendTableRequest::kNumTuplePagesFieldNumber;
const int SendTableRequest::kPageNoFieldNumber;
const int SendTableRequest::kPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendTableRequest::SendTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_SendTableRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.SendTableRequest)
}
SendTableRequest::SendTableRequest(const SendTableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page().size() > 0) {
    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  if (from.has_schema()) {
    schema_ = new ::vaultdb::Schema(*from.schema_);
  } else {
    schema_ = NULL;
  }
  ::memcpy(&is_header_, &from.is_header_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_no_) -
    reinterpret_cast<char*>(&is_header_)) + sizeof(page_no_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.SendTableRequest)
}

void SendTableRequest::SharedCtor() {
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&schema_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_no_) -
      reinterpret_cast<char*>(&schema_)) + sizeof(page_no_));
}

SendTableRequest::~SendTableRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.SendTableRequest)
  SharedDtor();
}

void SendTableRequest::SharedDtor() {
  page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schema_;
}

void SendTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SendTableRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendTableRequest& SendTableRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_SendTableRequest.base);
  return *internal_default_instance();
}


void SendTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.SendTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && schema_ != NULL) {
    delete schema_;
  }
  schema_ = NULL;
  ::memset(&is_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_no_) -
      reinterpret_cast<char*>(&is_header_)) + sizeof(page_no_));
  _internal_metadata_.Clear();
}

bool SendTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.SendTableRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_header_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vaultdb.Schema schema = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_tuples = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tuples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size_of_tuple = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_of_tuple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_tuple_pages = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tuple_pages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_no = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes page = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.SendTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.SendTableRequest)
  return false;
#undef DO_
}

void SendTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.SendTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_header = 2;
  if (this->is_header() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_header(), output);
  }

  // .vaultdb.Schema schema = 3;
  if (this->has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_schema(), output);
  }

  // int32 num_tuples = 4;
  if (this->num_tuples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_tuples(), output);
  }

  // int32 size_of_tuple = 5;
  if (this->size_of_tuple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->size_of_tuple(), output);
  }

  // int32 num_tuple_pages = 6;
  if (this->num_tuple_pages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_tuple_pages(), output);
  }

  // int32 page_no = 7;
  if (this->page_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->page_no(), output);
  }

  // bytes page = 8;
  if (this->page().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->page(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.SendTableRequest)
}

::google::protobuf::uint8* SendTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.SendTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_header = 2;
  if (this->is_header() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_header(), target);
  }

  // .vaultdb.Schema schema = 3;
  if (this->has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_schema(), deterministic, target);
  }

  // int32 num_tuples = 4;
  if (this->num_tuples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_tuples(), target);
  }

  // int32 size_of_tuple = 5;
  if (this->size_of_tuple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->size_of_tuple(), target);
  }

  // int32 num_tuple_pages = 6;
  if (this->num_tuple_pages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_tuple_pages(), target);
  }

  // int32 page_no = 7;
  if (this->page_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->page_no(), target);
  }

  // bytes page = 8;
  if (this->page().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->page(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.SendTableRequest)
  return target;
}

size_t SendTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.SendTableRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page = 8;
  if (this->page().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page());
  }

  // .vaultdb.Schema schema = 3;
  if (this->has_schema()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // bool is_header = 2;
  if (this->is_header() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_tuples = 4;
  if (this->num_tuples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tuples());
  }

  // int32 size_of_tuple = 5;
  if (this->size_of_tuple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_of_tuple());
  }

  // int32 num_tuple_pages = 6;
  if (this->num_tuple_pages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tuple_pages());
  }

  // int32 page_no = 7;
  if (this->page_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.SendTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.SendTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.SendTableRequest)
    MergeFrom(*source);
  }
}

void SendTableRequest::MergeFrom(const SendTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.SendTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page().size() > 0) {

    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  if (from.has_schema()) {
    mutable_schema()->::vaultdb::Schema::MergeFrom(from.schema());
  }
  if (from.is_header() != 0) {
    set_is_header(from.is_header());
  }
  if (from.num_tuples() != 0) {
    set_num_tuples(from.num_tuples());
  }
  if (from.size_of_tuple() != 0) {
    set_size_of_tuple(from.size_of_tuple());
  }
  if (from.num_tuple_pages() != 0) {
    set_num_tuple_pages(from.num_tuple_pages());
  }
  if (from.page_no() != 0) {
    set_page_no(from.page_no());
  }
}

void SendTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.SendTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTableRequest::CopyFrom(const SendTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.SendTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTableRequest::IsInitialized() const {
  return true;
}

void SendTableRequest::Swap(SendTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendTableRequest::InternalSwap(SendTableRequest* other) {
  using std::swap;
  page_.Swap(&other->page_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(schema_, other->schema_);
  swap(is_header_, other->is_header_);
  swap(num_tuples_, other->num_tuples_);
  swap(size_of_tuple_, other->size_of_tuple_);
  swap(num_tuple_pages_, other->num_tuple_pages_);
  swap(page_no_, other->page_no_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SendTableRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendTableResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendTableResponse::kTableIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendTableResponse::SendTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_SendTableResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.SendTableResponse)
}
SendTableResponse::SendTableResponse(const SendTableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:vaultdb.SendTableResponse)
}

void SendTableResponse::SharedCtor() {
  tableid_ = 0;
}

SendTableResponse::~SendTableResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.SendTableResponse)
  SharedDtor();
}

void SendTableResponse::SharedDtor() {
}

void SendTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SendTableResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendTableResponse& SendTableResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_SendTableResponse.base);
  return *internal_default_instance();
}


void SendTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.SendTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tableid_ = 0;
  _internal_metadata_.Clear();
}

bool SendTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.SendTableResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 tableID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.SendTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.SendTableResponse)
  return false;
#undef DO_
}

void SendTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.SendTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tableID = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.SendTableResponse)
}

::google::protobuf::uint8* SendTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.SendTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tableID = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.SendTableResponse)
  return target;
}

size_t SendTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.SendTableResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 tableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.SendTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendTableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.SendTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.SendTableResponse)
    MergeFrom(*source);
  }
}

void SendTableResponse::MergeFrom(const SendTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.SendTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
}

void SendTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.SendTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTableResponse::CopyFrom(const SendTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.SendTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTableResponse::IsInitialized() const {
  return true;
}

void SendTableResponse::Swap(SendTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendTableResponse::InternalSwap(SendTableResponse* other) {
  using std::swap;
  swap(tableid_, other->tableid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SendTableResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KFilterRequest::InitAsDefaultInstance() {
  ::vaultdb::_KFilterRequest_default_instance_._instance.get_mutable()->tid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
  ::vaultdb::_KFilterRequest_default_instance_._instance.get_mutable()->expr_ = const_cast< ::vaultdb::Expr*>(
      ::vaultdb::Expr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KFilterRequest::kTidFieldNumber;
const int KFilterRequest::kExprFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KFilterRequest::KFilterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_KFilterRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.KFilterRequest)
}
KFilterRequest::KFilterRequest(const KFilterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tid()) {
    tid_ = new ::vaultdb::TableID(*from.tid_);
  } else {
    tid_ = NULL;
  }
  if (from.has_expr()) {
    expr_ = new ::vaultdb::Expr(*from.expr_);
  } else {
    expr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.KFilterRequest)
}

void KFilterRequest::SharedCtor() {
  ::memset(&tid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expr_) -
      reinterpret_cast<char*>(&tid_)) + sizeof(expr_));
}

KFilterRequest::~KFilterRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.KFilterRequest)
  SharedDtor();
}

void KFilterRequest::SharedDtor() {
  if (this != internal_default_instance()) delete tid_;
  if (this != internal_default_instance()) delete expr_;
}

void KFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KFilterRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KFilterRequest& KFilterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_KFilterRequest.base);
  return *internal_default_instance();
}


void KFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.KFilterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tid_ != NULL) {
    delete tid_;
  }
  tid_ = NULL;
  if (GetArenaNoVirtual() == NULL && expr_ != NULL) {
    delete expr_;
  }
  expr_ = NULL;
  _internal_metadata_.Clear();
}

bool KFilterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.KFilterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vaultdb.Expr expr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.KFilterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.KFilterRequest)
  return false;
#undef DO_
}

void KFilterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.KFilterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tid(), output);
  }

  // .vaultdb.Expr expr = 2;
  if (this->has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_expr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.KFilterRequest)
}

::google::protobuf::uint8* KFilterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.KFilterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tid(), deterministic, target);
  }

  // .vaultdb.Expr expr = 2;
  if (this->has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_expr(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.KFilterRequest)
  return target;
}

size_t KFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.KFilterRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tid_);
  }

  // .vaultdb.Expr expr = 2;
  if (this->has_expr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KFilterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.KFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KFilterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KFilterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.KFilterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.KFilterRequest)
    MergeFrom(*source);
  }
}

void KFilterRequest::MergeFrom(const KFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.KFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tid()) {
    mutable_tid()->::vaultdb::TableID::MergeFrom(from.tid());
  }
  if (from.has_expr()) {
    mutable_expr()->::vaultdb::Expr::MergeFrom(from.expr());
  }
}

void KFilterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.KFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KFilterRequest::CopyFrom(const KFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.KFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KFilterRequest::IsInitialized() const {
  return true;
}

void KFilterRequest::Swap(KFilterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KFilterRequest::InternalSwap(KFilterRequest* other) {
  using std::swap;
  swap(tid_, other->tid_);
  swap(expr_, other->expr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KFilterRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KFilterResponse::InitAsDefaultInstance() {
  ::vaultdb::_KFilterResponse_default_instance_._instance.get_mutable()->tid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KFilterResponse::kTidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KFilterResponse::KFilterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_KFilterResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.KFilterResponse)
}
KFilterResponse::KFilterResponse(const KFilterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tid()) {
    tid_ = new ::vaultdb::TableID(*from.tid_);
  } else {
    tid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.KFilterResponse)
}

void KFilterResponse::SharedCtor() {
  tid_ = NULL;
}

KFilterResponse::~KFilterResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.KFilterResponse)
  SharedDtor();
}

void KFilterResponse::SharedDtor() {
  if (this != internal_default_instance()) delete tid_;
}

void KFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KFilterResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KFilterResponse& KFilterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_KFilterResponse.base);
  return *internal_default_instance();
}


void KFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.KFilterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tid_ != NULL) {
    delete tid_;
  }
  tid_ = NULL;
  _internal_metadata_.Clear();
}

bool KFilterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.KFilterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.KFilterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.KFilterResponse)
  return false;
#undef DO_
}

void KFilterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.KFilterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.KFilterResponse)
}

::google::protobuf::uint8* KFilterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.KFilterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.KFilterResponse)
  return target;
}

size_t KFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.KFilterResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KFilterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.KFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KFilterResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KFilterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.KFilterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.KFilterResponse)
    MergeFrom(*source);
  }
}

void KFilterResponse::MergeFrom(const KFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.KFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tid()) {
    mutable_tid()->::vaultdb::TableID::MergeFrom(from.tid());
  }
}

void KFilterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.KFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KFilterResponse::CopyFrom(const KFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.KFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KFilterResponse::IsInitialized() const {
  return true;
}

void KFilterResponse::Swap(KFilterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KFilterResponse::InternalSwap(KFilterResponse* other) {
  using std::swap;
  swap(tid_, other->tid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KFilterResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KJoinRequest::InitAsDefaultInstance() {
  ::vaultdb::_KJoinRequest_default_instance_._instance.get_mutable()->left_tid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
  ::vaultdb::_KJoinRequest_default_instance_._instance.get_mutable()->right_tid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
  ::vaultdb::_KJoinRequest_default_instance_._instance.get_mutable()->def_ = const_cast< ::vaultdb::JoinDef*>(
      ::vaultdb::JoinDef::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KJoinRequest::kLeftTidFieldNumber;
const int KJoinRequest::kRightTidFieldNumber;
const int KJoinRequest::kDefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KJoinRequest::KJoinRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_KJoinRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.KJoinRequest)
}
KJoinRequest::KJoinRequest(const KJoinRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_tid()) {
    left_tid_ = new ::vaultdb::TableID(*from.left_tid_);
  } else {
    left_tid_ = NULL;
  }
  if (from.has_right_tid()) {
    right_tid_ = new ::vaultdb::TableID(*from.right_tid_);
  } else {
    right_tid_ = NULL;
  }
  if (from.has_def()) {
    def_ = new ::vaultdb::JoinDef(*from.def_);
  } else {
    def_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.KJoinRequest)
}

void KJoinRequest::SharedCtor() {
  ::memset(&left_tid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&def_) -
      reinterpret_cast<char*>(&left_tid_)) + sizeof(def_));
}

KJoinRequest::~KJoinRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.KJoinRequest)
  SharedDtor();
}

void KJoinRequest::SharedDtor() {
  if (this != internal_default_instance()) delete left_tid_;
  if (this != internal_default_instance()) delete right_tid_;
  if (this != internal_default_instance()) delete def_;
}

void KJoinRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KJoinRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KJoinRequest& KJoinRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_KJoinRequest.base);
  return *internal_default_instance();
}


void KJoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.KJoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_tid_ != NULL) {
    delete left_tid_;
  }
  left_tid_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_tid_ != NULL) {
    delete right_tid_;
  }
  right_tid_ = NULL;
  if (GetArenaNoVirtual() == NULL && def_ != NULL) {
    delete def_;
  }
  def_ = NULL;
  _internal_metadata_.Clear();
}

bool KJoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.KJoinRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID left_tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vaultdb.TableID right_tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vaultdb.JoinDef def = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.KJoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.KJoinRequest)
  return false;
#undef DO_
}

void KJoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.KJoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID left_tid = 1;
  if (this->has_left_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_left_tid(), output);
  }

  // .vaultdb.TableID right_tid = 2;
  if (this->has_right_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_right_tid(), output);
  }

  // .vaultdb.JoinDef def = 3;
  if (this->has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_def(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.KJoinRequest)
}

::google::protobuf::uint8* KJoinRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.KJoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID left_tid = 1;
  if (this->has_left_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_left_tid(), deterministic, target);
  }

  // .vaultdb.TableID right_tid = 2;
  if (this->has_right_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_right_tid(), deterministic, target);
  }

  // .vaultdb.JoinDef def = 3;
  if (this->has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_def(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.KJoinRequest)
  return target;
}

size_t KJoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.KJoinRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID left_tid = 1;
  if (this->has_left_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_tid_);
  }

  // .vaultdb.TableID right_tid = 2;
  if (this->has_right_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_tid_);
  }

  // .vaultdb.JoinDef def = 3;
  if (this->has_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *def_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KJoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.KJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KJoinRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KJoinRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.KJoinRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.KJoinRequest)
    MergeFrom(*source);
  }
}

void KJoinRequest::MergeFrom(const KJoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.KJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_tid()) {
    mutable_left_tid()->::vaultdb::TableID::MergeFrom(from.left_tid());
  }
  if (from.has_right_tid()) {
    mutable_right_tid()->::vaultdb::TableID::MergeFrom(from.right_tid());
  }
  if (from.has_def()) {
    mutable_def()->::vaultdb::JoinDef::MergeFrom(from.def());
  }
}

void KJoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.KJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KJoinRequest::CopyFrom(const KJoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.KJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KJoinRequest::IsInitialized() const {
  return true;
}

void KJoinRequest::Swap(KJoinRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KJoinRequest::InternalSwap(KJoinRequest* other) {
  using std::swap;
  swap(left_tid_, other->left_tid_);
  swap(right_tid_, other->right_tid_);
  swap(def_, other->def_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KJoinRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KJoinResponse::InitAsDefaultInstance() {
  ::vaultdb::_KJoinResponse_default_instance_._instance.get_mutable()->tid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KJoinResponse::kTidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KJoinResponse::KJoinResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_KJoinResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.KJoinResponse)
}
KJoinResponse::KJoinResponse(const KJoinResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tid()) {
    tid_ = new ::vaultdb::TableID(*from.tid_);
  } else {
    tid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.KJoinResponse)
}

void KJoinResponse::SharedCtor() {
  tid_ = NULL;
}

KJoinResponse::~KJoinResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.KJoinResponse)
  SharedDtor();
}

void KJoinResponse::SharedDtor() {
  if (this != internal_default_instance()) delete tid_;
}

void KJoinResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KJoinResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KJoinResponse& KJoinResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_KJoinResponse.base);
  return *internal_default_instance();
}


void KJoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.KJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tid_ != NULL) {
    delete tid_;
  }
  tid_ = NULL;
  _internal_metadata_.Clear();
}

bool KJoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.KJoinResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.KJoinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.KJoinResponse)
  return false;
#undef DO_
}

void KJoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.KJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.KJoinResponse)
}

::google::protobuf::uint8* KJoinResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.KJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.KJoinResponse)
  return target;
}

size_t KJoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.KJoinResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KJoinResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.KJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KJoinResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KJoinResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.KJoinResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.KJoinResponse)
    MergeFrom(*source);
  }
}

void KJoinResponse::MergeFrom(const KJoinResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.KJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tid()) {
    mutable_tid()->::vaultdb::TableID::MergeFrom(from.tid());
  }
}

void KJoinResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.KJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KJoinResponse::CopyFrom(const KJoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.KJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KJoinResponse::IsInitialized() const {
  return true;
}

void KJoinResponse::Swap(KJoinResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KJoinResponse::InternalSwap(KJoinResponse* other) {
  using std::swap;
  swap(tid_, other->tid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KJoinResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupByDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupByDef::kTypeFieldNumber;
const int GroupByDef::kColNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupByDef::GroupByDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_GroupByDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.GroupByDef)
}
GroupByDef::GroupByDef(const GroupByDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_no_) -
    reinterpret_cast<char*>(&type_)) + sizeof(col_no_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.GroupByDef)
}

void GroupByDef::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_no_) -
      reinterpret_cast<char*>(&type_)) + sizeof(col_no_));
}

GroupByDef::~GroupByDef() {
  // @@protoc_insertion_point(destructor:vaultdb.GroupByDef)
  SharedDtor();
}

void GroupByDef::SharedDtor() {
}

void GroupByDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupByDef::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupByDef& GroupByDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_GroupByDef.base);
  return *internal_default_instance();
}


void GroupByDef::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.GroupByDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_no_) -
      reinterpret_cast<char*>(&type_)) + sizeof(col_no_));
  _internal_metadata_.Clear();
}

bool GroupByDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.GroupByDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.GroupByDef.GroupByType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vaultdb::GroupByDef_GroupByType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 col_no = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.GroupByDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.GroupByDef)
  return false;
#undef DO_
}

void GroupByDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.GroupByDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.GroupByDef.GroupByType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 col_no = 2;
  if (this->col_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col_no(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.GroupByDef)
}

::google::protobuf::uint8* GroupByDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.GroupByDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.GroupByDef.GroupByType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 col_no = 2;
  if (this->col_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col_no(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.GroupByDef)
  return target;
}

size_t GroupByDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.GroupByDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.GroupByDef.GroupByType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 col_no = 2;
  if (this->col_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupByDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.GroupByDef)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupByDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupByDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.GroupByDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.GroupByDef)
    MergeFrom(*source);
  }
}

void GroupByDef::MergeFrom(const GroupByDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.GroupByDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.col_no() != 0) {
    set_col_no(from.col_no());
  }
}

void GroupByDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.GroupByDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupByDef::CopyFrom(const GroupByDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.GroupByDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByDef::IsInitialized() const {
  return true;
}

void GroupByDef::Swap(GroupByDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupByDef::InternalSwap(GroupByDef* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(col_no_, other->col_no_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupByDef::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KAggregateRequest::InitAsDefaultInstance() {
  ::vaultdb::_KAggregateRequest_default_instance_._instance.get_mutable()->tid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
  ::vaultdb::_KAggregateRequest_default_instance_._instance.get_mutable()->def_ = const_cast< ::vaultdb::GroupByDef*>(
      ::vaultdb::GroupByDef::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KAggregateRequest::kTidFieldNumber;
const int KAggregateRequest::kDefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KAggregateRequest::KAggregateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_KAggregateRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.KAggregateRequest)
}
KAggregateRequest::KAggregateRequest(const KAggregateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tid()) {
    tid_ = new ::vaultdb::TableID(*from.tid_);
  } else {
    tid_ = NULL;
  }
  if (from.has_def()) {
    def_ = new ::vaultdb::GroupByDef(*from.def_);
  } else {
    def_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.KAggregateRequest)
}

void KAggregateRequest::SharedCtor() {
  ::memset(&tid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&def_) -
      reinterpret_cast<char*>(&tid_)) + sizeof(def_));
}

KAggregateRequest::~KAggregateRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.KAggregateRequest)
  SharedDtor();
}

void KAggregateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete tid_;
  if (this != internal_default_instance()) delete def_;
}

void KAggregateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KAggregateRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KAggregateRequest& KAggregateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_KAggregateRequest.base);
  return *internal_default_instance();
}


void KAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.KAggregateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tid_ != NULL) {
    delete tid_;
  }
  tid_ = NULL;
  if (GetArenaNoVirtual() == NULL && def_ != NULL) {
    delete def_;
  }
  def_ = NULL;
  _internal_metadata_.Clear();
}

bool KAggregateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.KAggregateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vaultdb.GroupByDef def = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.KAggregateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.KAggregateRequest)
  return false;
#undef DO_
}

void KAggregateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.KAggregateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tid(), output);
  }

  // .vaultdb.GroupByDef def = 2;
  if (this->has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_def(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.KAggregateRequest)
}

::google::protobuf::uint8* KAggregateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.KAggregateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tid(), deterministic, target);
  }

  // .vaultdb.GroupByDef def = 2;
  if (this->has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_def(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.KAggregateRequest)
  return target;
}

size_t KAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.KAggregateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tid_);
  }

  // .vaultdb.GroupByDef def = 2;
  if (this->has_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *def_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KAggregateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.KAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KAggregateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KAggregateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.KAggregateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.KAggregateRequest)
    MergeFrom(*source);
  }
}

void KAggregateRequest::MergeFrom(const KAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.KAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tid()) {
    mutable_tid()->::vaultdb::TableID::MergeFrom(from.tid());
  }
  if (from.has_def()) {
    mutable_def()->::vaultdb::GroupByDef::MergeFrom(from.def());
  }
}

void KAggregateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.KAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KAggregateRequest::CopyFrom(const KAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.KAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KAggregateRequest::IsInitialized() const {
  return true;
}

void KAggregateRequest::Swap(KAggregateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KAggregateRequest::InternalSwap(KAggregateRequest* other) {
  using std::swap;
  swap(tid_, other->tid_);
  swap(def_, other->def_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KAggregateRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KAggregateResponse::InitAsDefaultInstance() {
  ::vaultdb::_KAggregateResponse_default_instance_._instance.get_mutable()->tid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KAggregateResponse::kTidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KAggregateResponse::KAggregateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_KAggregateResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.KAggregateResponse)
}
KAggregateResponse::KAggregateResponse(const KAggregateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tid()) {
    tid_ = new ::vaultdb::TableID(*from.tid_);
  } else {
    tid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.KAggregateResponse)
}

void KAggregateResponse::SharedCtor() {
  tid_ = NULL;
}

KAggregateResponse::~KAggregateResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.KAggregateResponse)
  SharedDtor();
}

void KAggregateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete tid_;
}

void KAggregateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KAggregateResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KAggregateResponse& KAggregateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_KAggregateResponse.base);
  return *internal_default_instance();
}


void KAggregateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.KAggregateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tid_ != NULL) {
    delete tid_;
  }
  tid_ = NULL;
  _internal_metadata_.Clear();
}

bool KAggregateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.KAggregateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.KAggregateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.KAggregateResponse)
  return false;
#undef DO_
}

void KAggregateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.KAggregateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.KAggregateResponse)
}

::google::protobuf::uint8* KAggregateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.KAggregateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.KAggregateResponse)
  return target;
}

size_t KAggregateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.KAggregateResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KAggregateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.KAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KAggregateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KAggregateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.KAggregateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.KAggregateResponse)
    MergeFrom(*source);
  }
}

void KAggregateResponse::MergeFrom(const KAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.KAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tid()) {
    mutable_tid()->::vaultdb::TableID::MergeFrom(from.tid());
  }
}

void KAggregateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.KAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KAggregateResponse::CopyFrom(const KAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.KAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KAggregateResponse::IsInitialized() const {
  return true;
}

void KAggregateResponse::Swap(KAggregateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KAggregateResponse::InternalSwap(KAggregateResponse* other) {
  using std::swap;
  swap(tid_, other->tid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KAggregateResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinColID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinColID::kSideFieldNumber;
const int JoinColID::kColNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinColID::JoinColID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_JoinColID.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.JoinColID)
}
JoinColID::JoinColID(const JoinColID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&side_, &from.side_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_no_) -
    reinterpret_cast<char*>(&side_)) + sizeof(col_no_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.JoinColID)
}

void JoinColID::SharedCtor() {
  ::memset(&side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_no_) -
      reinterpret_cast<char*>(&side_)) + sizeof(col_no_));
}

JoinColID::~JoinColID() {
  // @@protoc_insertion_point(destructor:vaultdb.JoinColID)
  SharedDtor();
}

void JoinColID::SharedDtor() {
}

void JoinColID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JoinColID::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinColID& JoinColID::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_JoinColID.base);
  return *internal_default_instance();
}


void JoinColID::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.JoinColID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_no_) -
      reinterpret_cast<char*>(&side_)) + sizeof(col_no_));
  _internal_metadata_.Clear();
}

bool JoinColID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.JoinColID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.JoinColID.RelationSide side = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::vaultdb::JoinColID_RelationSide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 col_no = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.JoinColID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.JoinColID)
  return false;
#undef DO_
}

void JoinColID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.JoinColID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.JoinColID.RelationSide side = 1;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->side(), output);
  }

  // int32 col_no = 2;
  if (this->col_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col_no(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.JoinColID)
}

::google::protobuf::uint8* JoinColID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.JoinColID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.JoinColID.RelationSide side = 1;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->side(), target);
  }

  // int32 col_no = 2;
  if (this->col_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col_no(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.JoinColID)
  return target;
}

size_t JoinColID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.JoinColID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.JoinColID.RelationSide side = 1;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // int32 col_no = 2;
  if (this->col_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinColID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.JoinColID)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinColID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinColID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.JoinColID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.JoinColID)
    MergeFrom(*source);
  }
}

void JoinColID::MergeFrom(const JoinColID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.JoinColID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.col_no() != 0) {
    set_col_no(from.col_no());
  }
}

void JoinColID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.JoinColID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinColID::CopyFrom(const JoinColID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.JoinColID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinColID::IsInitialized() const {
  return true;
}

void JoinColID::Swap(JoinColID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinColID::InternalSwap(JoinColID* other) {
  using std::swap;
  swap(side_, other->side_);
  swap(col_no_, other->col_no_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JoinColID::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinDef::kLColFieldNumber;
const int JoinDef::kRColFieldNumber;
const int JoinDef::kProjectLenFieldNumber;
const int JoinDef::kProjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinDef::JoinDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_JoinDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.JoinDef)
}
JoinDef::JoinDef(const JoinDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      project_list_(from.project_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&l_col_, &from.l_col_,
    static_cast<size_t>(reinterpret_cast<char*>(&project_len_) -
    reinterpret_cast<char*>(&l_col_)) + sizeof(project_len_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.JoinDef)
}

void JoinDef::SharedCtor() {
  ::memset(&l_col_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&project_len_) -
      reinterpret_cast<char*>(&l_col_)) + sizeof(project_len_));
}

JoinDef::~JoinDef() {
  // @@protoc_insertion_point(destructor:vaultdb.JoinDef)
  SharedDtor();
}

void JoinDef::SharedDtor() {
}

void JoinDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JoinDef::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinDef& JoinDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_JoinDef.base);
  return *internal_default_instance();
}


void JoinDef::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.JoinDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_list_.Clear();
  ::memset(&l_col_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&project_len_) -
      reinterpret_cast<char*>(&l_col_)) + sizeof(project_len_));
  _internal_metadata_.Clear();
}

bool JoinDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.JoinDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 l_col = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &l_col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 r_col = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 project_len = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vaultdb.JoinColID project_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_project_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.JoinDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.JoinDef)
  return false;
#undef DO_
}

void JoinDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.JoinDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 l_col = 1;
  if (this->l_col() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->l_col(), output);
  }

  // int32 r_col = 2;
  if (this->r_col() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->r_col(), output);
  }

  // int32 project_len = 3;
  if (this->project_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->project_len(), output);
  }

  // repeated .vaultdb.JoinColID project_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->project_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->project_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.JoinDef)
}

::google::protobuf::uint8* JoinDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.JoinDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 l_col = 1;
  if (this->l_col() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->l_col(), target);
  }

  // int32 r_col = 2;
  if (this->r_col() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->r_col(), target);
  }

  // int32 project_len = 3;
  if (this->project_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->project_len(), target);
  }

  // repeated .vaultdb.JoinColID project_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->project_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->project_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.JoinDef)
  return target;
}

size_t JoinDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.JoinDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vaultdb.JoinColID project_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->project_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->project_list(static_cast<int>(i)));
    }
  }

  // int32 l_col = 1;
  if (this->l_col() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->l_col());
  }

  // int32 r_col = 2;
  if (this->r_col() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->r_col());
  }

  // int32 project_len = 3;
  if (this->project_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->project_len());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.JoinDef)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.JoinDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.JoinDef)
    MergeFrom(*source);
  }
}

void JoinDef::MergeFrom(const JoinDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.JoinDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  project_list_.MergeFrom(from.project_list_);
  if (from.l_col() != 0) {
    set_l_col(from.l_col());
  }
  if (from.r_col() != 0) {
    set_r_col(from.r_col());
  }
  if (from.project_len() != 0) {
    set_project_len(from.project_len());
  }
}

void JoinDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.JoinDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinDef::CopyFrom(const JoinDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.JoinDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinDef::IsInitialized() const {
  return true;
}

void JoinDef::Swap(JoinDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinDef::InternalSwap(JoinDef* other) {
  using std::swap;
  CastToBase(&project_list_)->InternalSwap(CastToBase(&other->project_list_));
  swap(l_col_, other->l_col_);
  swap(r_col_, other->r_col_);
  swap(project_len_, other->project_len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JoinDef::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KSortRequest::InitAsDefaultInstance() {
  ::vaultdb::_KSortRequest_default_instance_._instance.get_mutable()->tid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
  ::vaultdb::_KSortRequest_default_instance_._instance.get_mutable()->sortdef_ = const_cast< ::vaultdb::SortDef*>(
      ::vaultdb::SortDef::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KSortRequest::kTidFieldNumber;
const int KSortRequest::kSortdefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KSortRequest::KSortRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_KSortRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.KSortRequest)
}
KSortRequest::KSortRequest(const KSortRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tid()) {
    tid_ = new ::vaultdb::TableID(*from.tid_);
  } else {
    tid_ = NULL;
  }
  if (from.has_sortdef()) {
    sortdef_ = new ::vaultdb::SortDef(*from.sortdef_);
  } else {
    sortdef_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.KSortRequest)
}

void KSortRequest::SharedCtor() {
  ::memset(&tid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sortdef_) -
      reinterpret_cast<char*>(&tid_)) + sizeof(sortdef_));
}

KSortRequest::~KSortRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.KSortRequest)
  SharedDtor();
}

void KSortRequest::SharedDtor() {
  if (this != internal_default_instance()) delete tid_;
  if (this != internal_default_instance()) delete sortdef_;
}

void KSortRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KSortRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KSortRequest& KSortRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_KSortRequest.base);
  return *internal_default_instance();
}


void KSortRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.KSortRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tid_ != NULL) {
    delete tid_;
  }
  tid_ = NULL;
  if (GetArenaNoVirtual() == NULL && sortdef_ != NULL) {
    delete sortdef_;
  }
  sortdef_ = NULL;
  _internal_metadata_.Clear();
}

bool KSortRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.KSortRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vaultdb.SortDef sortdef = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sortdef()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.KSortRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.KSortRequest)
  return false;
#undef DO_
}

void KSortRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.KSortRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tid(), output);
  }

  // .vaultdb.SortDef sortdef = 2;
  if (this->has_sortdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sortdef(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.KSortRequest)
}

::google::protobuf::uint8* KSortRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.KSortRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tid(), deterministic, target);
  }

  // .vaultdb.SortDef sortdef = 2;
  if (this->has_sortdef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sortdef(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.KSortRequest)
  return target;
}

size_t KSortRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.KSortRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tid_);
  }

  // .vaultdb.SortDef sortdef = 2;
  if (this->has_sortdef()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sortdef_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KSortRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.KSortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KSortRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KSortRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.KSortRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.KSortRequest)
    MergeFrom(*source);
  }
}

void KSortRequest::MergeFrom(const KSortRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.KSortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tid()) {
    mutable_tid()->::vaultdb::TableID::MergeFrom(from.tid());
  }
  if (from.has_sortdef()) {
    mutable_sortdef()->::vaultdb::SortDef::MergeFrom(from.sortdef());
  }
}

void KSortRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.KSortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KSortRequest::CopyFrom(const KSortRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.KSortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KSortRequest::IsInitialized() const {
  return true;
}

void KSortRequest::Swap(KSortRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KSortRequest::InternalSwap(KSortRequest* other) {
  using std::swap;
  swap(tid_, other->tid_);
  swap(sortdef_, other->sortdef_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KSortRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KSortResponse::InitAsDefaultInstance() {
  ::vaultdb::_KSortResponse_default_instance_._instance.get_mutable()->tid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KSortResponse::kTidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KSortResponse::KSortResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_KSortResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.KSortResponse)
}
KSortResponse::KSortResponse(const KSortResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tid()) {
    tid_ = new ::vaultdb::TableID(*from.tid_);
  } else {
    tid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.KSortResponse)
}

void KSortResponse::SharedCtor() {
  tid_ = NULL;
}

KSortResponse::~KSortResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.KSortResponse)
  SharedDtor();
}

void KSortResponse::SharedDtor() {
  if (this != internal_default_instance()) delete tid_;
}

void KSortResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KSortResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KSortResponse& KSortResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_KSortResponse.base);
  return *internal_default_instance();
}


void KSortResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.KSortResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tid_ != NULL) {
    delete tid_;
  }
  tid_ = NULL;
  _internal_metadata_.Clear();
}

bool KSortResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.KSortResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.KSortResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.KSortResponse)
  return false;
#undef DO_
}

void KSortResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.KSortResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.KSortResponse)
}

::google::protobuf::uint8* KSortResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.KSortResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.KSortResponse)
  return target;
}

size_t KSortResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.KSortResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID tid = 1;
  if (this->has_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KSortResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.KSortResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KSortResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KSortResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.KSortResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.KSortResponse)
    MergeFrom(*source);
  }
}

void KSortResponse::MergeFrom(const KSortResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.KSortResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tid()) {
    mutable_tid()->::vaultdb::TableID::MergeFrom(from.tid());
  }
}

void KSortResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.KSortResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KSortResponse::CopyFrom(const KSortResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.KSortResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KSortResponse::IsInitialized() const {
  return true;
}

void KSortResponse::Swap(KSortResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KSortResponse::InternalSwap(KSortResponse* other) {
  using std::swap;
  swap(tid_, other->tid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KSortResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeneralizeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralizeRequest::GeneralizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_GeneralizeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.GeneralizeRequest)
}
GeneralizeRequest::GeneralizeRequest(const GeneralizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.GeneralizeRequest)
}

void GeneralizeRequest::SharedCtor() {
}

GeneralizeRequest::~GeneralizeRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.GeneralizeRequest)
  SharedDtor();
}

void GeneralizeRequest::SharedDtor() {
}

void GeneralizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeneralizeRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeneralizeRequest& GeneralizeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_GeneralizeRequest.base);
  return *internal_default_instance();
}


void GeneralizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.GeneralizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GeneralizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.GeneralizeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.GeneralizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.GeneralizeRequest)
  return false;
#undef DO_
}

void GeneralizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.GeneralizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.GeneralizeRequest)
}

::google::protobuf::uint8* GeneralizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.GeneralizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.GeneralizeRequest)
  return target;
}

size_t GeneralizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.GeneralizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.GeneralizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.GeneralizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.GeneralizeRequest)
    MergeFrom(*source);
  }
}

void GeneralizeRequest::MergeFrom(const GeneralizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.GeneralizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GeneralizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.GeneralizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralizeRequest::CopyFrom(const GeneralizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.GeneralizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralizeRequest::IsInitialized() const {
  return true;
}

void GeneralizeRequest::Swap(GeneralizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralizeRequest::InternalSwap(GeneralizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeneralizeRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeneralizeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralizeResponse::GeneralizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_GeneralizeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.GeneralizeResponse)
}
GeneralizeResponse::GeneralizeResponse(const GeneralizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.GeneralizeResponse)
}

void GeneralizeResponse::SharedCtor() {
}

GeneralizeResponse::~GeneralizeResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.GeneralizeResponse)
  SharedDtor();
}

void GeneralizeResponse::SharedDtor() {
}

void GeneralizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeneralizeResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeneralizeResponse& GeneralizeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_GeneralizeResponse.base);
  return *internal_default_instance();
}


void GeneralizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.GeneralizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GeneralizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.GeneralizeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.GeneralizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.GeneralizeResponse)
  return false;
#undef DO_
}

void GeneralizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.GeneralizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.GeneralizeResponse)
}

::google::protobuf::uint8* GeneralizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.GeneralizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.GeneralizeResponse)
  return target;
}

size_t GeneralizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.GeneralizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.GeneralizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.GeneralizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.GeneralizeResponse)
    MergeFrom(*source);
  }
}

void GeneralizeResponse::MergeFrom(const GeneralizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.GeneralizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GeneralizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.GeneralizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralizeResponse::CopyFrom(const GeneralizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.GeneralizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralizeResponse::IsInitialized() const {
  return true;
}

void GeneralizeResponse::Swap(GeneralizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralizeResponse::InternalSwap(GeneralizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeneralizeResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerHostInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerHostInfo::kHostnameFieldNumber;
const int PeerHostInfo::kHostnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerHostInfo::PeerHostInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_PeerHostInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.PeerHostInfo)
}
PeerHostInfo::PeerHostInfo(const PeerHostInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  hostnum_ = from.hostnum_;
  // @@protoc_insertion_point(copy_constructor:vaultdb.PeerHostInfo)
}

void PeerHostInfo::SharedCtor() {
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostnum_ = 0;
}

PeerHostInfo::~PeerHostInfo() {
  // @@protoc_insertion_point(destructor:vaultdb.PeerHostInfo)
  SharedDtor();
}

void PeerHostInfo::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerHostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerHostInfo::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerHostInfo& PeerHostInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_PeerHostInfo.base);
  return *internal_default_instance();
}


void PeerHostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.PeerHostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostnum_ = 0;
  _internal_metadata_.Clear();
}

bool PeerHostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.PeerHostInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hostname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.PeerHostInfo.hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hostnum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hostnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.PeerHostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.PeerHostInfo)
  return false;
#undef DO_
}

void PeerHostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.PeerHostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.PeerHostInfo.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // int32 hostnum = 2;
  if (this->hostnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hostnum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.PeerHostInfo)
}

::google::protobuf::uint8* PeerHostInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.PeerHostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.PeerHostInfo.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // int32 hostnum = 2;
  if (this->hostnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hostnum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.PeerHostInfo)
  return target;
}

size_t PeerHostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.PeerHostInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // int32 hostnum = 2;
  if (this->hostnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hostnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerHostInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.PeerHostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerHostInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerHostInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.PeerHostInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.PeerHostInfo)
    MergeFrom(*source);
  }
}

void PeerHostInfo::MergeFrom(const PeerHostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.PeerHostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.hostnum() != 0) {
    set_hostnum(from.hostnum());
  }
}

void PeerHostInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.PeerHostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerHostInfo::CopyFrom(const PeerHostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.PeerHostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerHostInfo::IsInitialized() const {
  return true;
}

void PeerHostInfo::Swap(PeerHostInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerHostInfo::InternalSwap(PeerHostInfo* other) {
  using std::swap;
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hostnum_, other->hostnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerHostInfo::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPeerHostsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerHostsRequest::kHostnamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerHostsRequest::GetPeerHostsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_GetPeerHostsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.GetPeerHostsRequest)
}
GetPeerHostsRequest::GetPeerHostsRequest(const GetPeerHostsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hostnames_(from.hostnames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.GetPeerHostsRequest)
}

void GetPeerHostsRequest::SharedCtor() {
}

GetPeerHostsRequest::~GetPeerHostsRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.GetPeerHostsRequest)
  SharedDtor();
}

void GetPeerHostsRequest::SharedDtor() {
}

void GetPeerHostsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPeerHostsRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPeerHostsRequest& GetPeerHostsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_GetPeerHostsRequest.base);
  return *internal_default_instance();
}


void GetPeerHostsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.GetPeerHostsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostnames_.Clear();
  _internal_metadata_.Clear();
}

bool GetPeerHostsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.GetPeerHostsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vaultdb.PeerHostInfo hostnames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hostnames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.GetPeerHostsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.GetPeerHostsRequest)
  return false;
#undef DO_
}

void GetPeerHostsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.GetPeerHostsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.PeerHostInfo hostnames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hostnames_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->hostnames(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.GetPeerHostsRequest)
}

::google::protobuf::uint8* GetPeerHostsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.GetPeerHostsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.PeerHostInfo hostnames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hostnames_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->hostnames(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.GetPeerHostsRequest)
  return target;
}

size_t GetPeerHostsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.GetPeerHostsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vaultdb.PeerHostInfo hostnames = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->hostnames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hostnames(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerHostsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.GetPeerHostsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerHostsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerHostsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.GetPeerHostsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.GetPeerHostsRequest)
    MergeFrom(*source);
  }
}

void GetPeerHostsRequest::MergeFrom(const GetPeerHostsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.GetPeerHostsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hostnames_.MergeFrom(from.hostnames_);
}

void GetPeerHostsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.GetPeerHostsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerHostsRequest::CopyFrom(const GetPeerHostsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.GetPeerHostsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerHostsRequest::IsInitialized() const {
  return true;
}

void GetPeerHostsRequest::Swap(GetPeerHostsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerHostsRequest::InternalSwap(GetPeerHostsRequest* other) {
  using std::swap;
  CastToBase(&hostnames_)->InternalSwap(CastToBase(&other->hostnames_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPeerHostsRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPeerHostsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerHostsResponse::GetPeerHostsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_GetPeerHostsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.GetPeerHostsResponse)
}
GetPeerHostsResponse::GetPeerHostsResponse(const GetPeerHostsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.GetPeerHostsResponse)
}

void GetPeerHostsResponse::SharedCtor() {
}

GetPeerHostsResponse::~GetPeerHostsResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.GetPeerHostsResponse)
  SharedDtor();
}

void GetPeerHostsResponse::SharedDtor() {
}

void GetPeerHostsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPeerHostsResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPeerHostsResponse& GetPeerHostsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_GetPeerHostsResponse.base);
  return *internal_default_instance();
}


void GetPeerHostsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.GetPeerHostsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetPeerHostsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.GetPeerHostsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.GetPeerHostsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.GetPeerHostsResponse)
  return false;
#undef DO_
}

void GetPeerHostsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.GetPeerHostsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.GetPeerHostsResponse)
}

::google::protobuf::uint8* GetPeerHostsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.GetPeerHostsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.GetPeerHostsResponse)
  return target;
}

size_t GetPeerHostsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.GetPeerHostsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerHostsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.GetPeerHostsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerHostsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerHostsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.GetPeerHostsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.GetPeerHostsResponse)
    MergeFrom(*source);
  }
}

void GetPeerHostsResponse::MergeFrom(const GetPeerHostsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.GetPeerHostsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPeerHostsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.GetPeerHostsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerHostsResponse::CopyFrom(const GetPeerHostsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.GetPeerHostsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerHostsResponse::IsInitialized() const {
  return true;
}

void GetPeerHostsResponse::Swap(GetPeerHostsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerHostsResponse::InternalSwap(GetPeerHostsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPeerHostsResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DBMSQueryRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBMSQueryRequest::kDbnameFieldNumber;
const int DBMSQueryRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBMSQueryRequest::DBMSQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_DBMSQueryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.DBMSQueryRequest)
}
DBMSQueryRequest::DBMSQueryRequest(const DBMSQueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dbname().size() > 0) {
    dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.DBMSQueryRequest)
}

void DBMSQueryRequest::SharedCtor() {
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DBMSQueryRequest::~DBMSQueryRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.DBMSQueryRequest)
  SharedDtor();
}

void DBMSQueryRequest::SharedDtor() {
  dbname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DBMSQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DBMSQueryRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBMSQueryRequest& DBMSQueryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_DBMSQueryRequest.base);
  return *internal_default_instance();
}


void DBMSQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.DBMSQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DBMSQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.DBMSQueryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dbname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbname().data(), static_cast<int>(this->dbname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.DBMSQueryRequest.dbname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.DBMSQueryRequest.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.DBMSQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.DBMSQueryRequest)
  return false;
#undef DO_
}

void DBMSQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.DBMSQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dbname = 1;
  if (this->dbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBMSQueryRequest.dbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dbname(), output);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBMSQueryRequest.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.DBMSQueryRequest)
}

::google::protobuf::uint8* DBMSQueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.DBMSQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dbname = 1;
  if (this->dbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBMSQueryRequest.dbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbname(), target);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBMSQueryRequest.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.DBMSQueryRequest)
  return target;
}

size_t DBMSQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.DBMSQueryRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dbname = 1;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbname());
  }

  // string query = 2;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBMSQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.DBMSQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DBMSQueryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBMSQueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.DBMSQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.DBMSQueryRequest)
    MergeFrom(*source);
  }
}

void DBMSQueryRequest::MergeFrom(const DBMSQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.DBMSQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dbname().size() > 0) {

    dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void DBMSQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.DBMSQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBMSQueryRequest::CopyFrom(const DBMSQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.DBMSQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMSQueryRequest::IsInitialized() const {
  return true;
}

void DBMSQueryRequest::Swap(DBMSQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBMSQueryRequest::InternalSwap(DBMSQueryRequest* other) {
  using std::swap;
  dbname_.Swap(&other->dbname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DBMSQueryRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DBMSQueryResponse::InitAsDefaultInstance() {
  ::vaultdb::_DBMSQueryResponse_default_instance_._instance.get_mutable()->tableid_ = const_cast< ::vaultdb::TableID*>(
      ::vaultdb::TableID::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBMSQueryResponse::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBMSQueryResponse::DBMSQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_DBMSQueryResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.DBMSQueryResponse)
}
DBMSQueryResponse::DBMSQueryResponse(const DBMSQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tableid()) {
    tableid_ = new ::vaultdb::TableID(*from.tableid_);
  } else {
    tableid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.DBMSQueryResponse)
}

void DBMSQueryResponse::SharedCtor() {
  tableid_ = NULL;
}

DBMSQueryResponse::~DBMSQueryResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.DBMSQueryResponse)
  SharedDtor();
}

void DBMSQueryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete tableid_;
}

void DBMSQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DBMSQueryResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBMSQueryResponse& DBMSQueryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_DBMSQueryResponse.base);
  return *internal_default_instance();
}


void DBMSQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.DBMSQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tableid_ != NULL) {
    delete tableid_;
  }
  tableid_ = NULL;
  _internal_metadata_.Clear();
}

bool DBMSQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.DBMSQueryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.TableID tableId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tableid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.DBMSQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.DBMSQueryResponse)
  return false;
#undef DO_
}

void DBMSQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.DBMSQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tableId = 1;
  if (this->has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tableid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.DBMSQueryResponse)
}

::google::protobuf::uint8* DBMSQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.DBMSQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.TableID tableId = 1;
  if (this->has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tableid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.DBMSQueryResponse)
  return target;
}

size_t DBMSQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.DBMSQueryResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.TableID tableId = 1;
  if (this->has_tableid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tableid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBMSQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.DBMSQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DBMSQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBMSQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.DBMSQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.DBMSQueryResponse)
    MergeFrom(*source);
  }
}

void DBMSQueryResponse::MergeFrom(const DBMSQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.DBMSQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tableid()) {
    mutable_tableid()->::vaultdb::TableID::MergeFrom(from.tableid());
  }
}

void DBMSQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.DBMSQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBMSQueryResponse::CopyFrom(const DBMSQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.DBMSQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMSQueryResponse::IsInitialized() const {
  return true;
}

void DBMSQueryResponse::Swap(DBMSQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBMSQueryResponse::InternalSwap(DBMSQueryResponse* other) {
  using std::swap;
  swap(tableid_, other->tableid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DBMSQueryResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequest::kHostnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_RegisterRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.RegisterRequest)
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterRequest& RegisterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_RegisterRequest.base);
  return *internal_default_instance();
}


void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.RegisterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hostname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.RegisterRequest.hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.RegisterRequest)
  return false;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.RegisterRequest.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.RegisterRequest)
}

::google::protobuf::uint8* RegisterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.RegisterRequest.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.RegisterRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.RegisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponse::kHostNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponse::RegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_RegisterResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_num_ = from.host_num_;
  // @@protoc_insertion_point(copy_constructor:vaultdb.RegisterResponse)
}

void RegisterResponse::SharedCtor() {
  host_num_ = 0;
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.RegisterResponse)
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
}

void RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterResponse& RegisterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_RegisterResponse.base);
  return *internal_default_instance();
}


void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_num_ = 0;
  _internal_metadata_.Clear();
}

bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.RegisterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 host_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.RegisterResponse)
  return false;
#undef DO_
}

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 host_num = 1;
  if (this->host_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->host_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.RegisterResponse)
}

::google::protobuf::uint8* RegisterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 host_num = 1;
  if (this->host_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->host_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.RegisterResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 host_num = 1;
  if (this->host_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->host_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.RegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_num() != 0) {
    set_host_num(from.host_num());
  }
}

void RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  swap(host_num_, other->host_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NumHostsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NumHostsRequest::NumHostsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_NumHostsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.NumHostsRequest)
}
NumHostsRequest::NumHostsRequest(const NumHostsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.NumHostsRequest)
}

void NumHostsRequest::SharedCtor() {
}

NumHostsRequest::~NumHostsRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.NumHostsRequest)
  SharedDtor();
}

void NumHostsRequest::SharedDtor() {
}

void NumHostsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NumHostsRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NumHostsRequest& NumHostsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_NumHostsRequest.base);
  return *internal_default_instance();
}


void NumHostsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.NumHostsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool NumHostsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.NumHostsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.NumHostsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.NumHostsRequest)
  return false;
#undef DO_
}

void NumHostsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.NumHostsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.NumHostsRequest)
}

::google::protobuf::uint8* NumHostsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.NumHostsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.NumHostsRequest)
  return target;
}

size_t NumHostsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.NumHostsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumHostsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.NumHostsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NumHostsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NumHostsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.NumHostsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.NumHostsRequest)
    MergeFrom(*source);
  }
}

void NumHostsRequest::MergeFrom(const NumHostsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.NumHostsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NumHostsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.NumHostsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumHostsRequest::CopyFrom(const NumHostsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.NumHostsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumHostsRequest::IsInitialized() const {
  return true;
}

void NumHostsRequest::Swap(NumHostsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NumHostsRequest::InternalSwap(NumHostsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NumHostsRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NumHostResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NumHostResp::kNumHostsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NumHostResp::NumHostResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_NumHostResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.NumHostResp)
}
NumHostResp::NumHostResp(const NumHostResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_hosts_ = from.num_hosts_;
  // @@protoc_insertion_point(copy_constructor:vaultdb.NumHostResp)
}

void NumHostResp::SharedCtor() {
  num_hosts_ = 0;
}

NumHostResp::~NumHostResp() {
  // @@protoc_insertion_point(destructor:vaultdb.NumHostResp)
  SharedDtor();
}

void NumHostResp::SharedDtor() {
}

void NumHostResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NumHostResp::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NumHostResp& NumHostResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_NumHostResp.base);
  return *internal_default_instance();
}


void NumHostResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.NumHostResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_hosts_ = 0;
  _internal_metadata_.Clear();
}

bool NumHostResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.NumHostResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_hosts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hosts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.NumHostResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.NumHostResp)
  return false;
#undef DO_
}

void NumHostResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.NumHostResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_hosts = 1;
  if (this->num_hosts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_hosts(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.NumHostResp)
}

::google::protobuf::uint8* NumHostResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.NumHostResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_hosts = 1;
  if (this->num_hosts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_hosts(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.NumHostResp)
  return target;
}

size_t NumHostResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.NumHostResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 num_hosts = 1;
  if (this->num_hosts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_hosts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumHostResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.NumHostResp)
  GOOGLE_DCHECK_NE(&from, this);
  const NumHostResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NumHostResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.NumHostResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.NumHostResp)
    MergeFrom(*source);
  }
}

void NumHostResp::MergeFrom(const NumHostResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.NumHostResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_hosts() != 0) {
    set_num_hosts(from.num_hosts());
  }
}

void NumHostResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.NumHostResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumHostResp::CopyFrom(const NumHostResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.NumHostResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumHostResp::IsInitialized() const {
  return true;
}

void NumHostResp::Swap(NumHostResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NumHostResp::InternalSwap(NumHostResp* other) {
  using std::swap;
  swap(num_hosts_, other->num_hosts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NumHostResp::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DBQueryRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBQueryRequest::kQueryStringFieldNumber;
const int DBQueryRequest::kDbnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBQueryRequest::DBQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_DBQueryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.DBQueryRequest)
}
DBQueryRequest::DBQueryRequest(const DBQueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query_string().size() > 0) {
    query_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_string_);
  }
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dbname().size() > 0) {
    dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.DBQueryRequest)
}

void DBQueryRequest::SharedCtor() {
  query_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DBQueryRequest::~DBQueryRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.DBQueryRequest)
  SharedDtor();
}

void DBQueryRequest::SharedDtor() {
  query_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DBQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DBQueryRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBQueryRequest& DBQueryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_DBQueryRequest.base);
  return *internal_default_instance();
}


void DBQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.DBQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DBQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.DBQueryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query_string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query_string().data(), static_cast<int>(this->query_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.DBQueryRequest.query_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dbname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbname().data(), static_cast<int>(this->dbname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.DBQueryRequest.dbname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.DBQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.DBQueryRequest)
  return false;
#undef DO_
}

void DBQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.DBQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_string = 1;
  if (this->query_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_string().data(), static_cast<int>(this->query_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBQueryRequest.query_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_string(), output);
  }

  // string dbname = 2;
  if (this->dbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBQueryRequest.dbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dbname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.DBQueryRequest)
}

::google::protobuf::uint8* DBQueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.DBQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_string = 1;
  if (this->query_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_string().data(), static_cast<int>(this->query_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBQueryRequest.query_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_string(), target);
  }

  // string dbname = 2;
  if (this->dbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBQueryRequest.dbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dbname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.DBQueryRequest)
  return target;
}

size_t DBQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.DBQueryRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string query_string = 1;
  if (this->query_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query_string());
  }

  // string dbname = 2;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.DBQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DBQueryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBQueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.DBQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.DBQueryRequest)
    MergeFrom(*source);
  }
}

void DBQueryRequest::MergeFrom(const DBQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.DBQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query_string().size() > 0) {

    query_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_string_);
  }
  if (from.dbname().size() > 0) {

    dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
}

void DBQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.DBQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBQueryRequest::CopyFrom(const DBQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.DBQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBQueryRequest::IsInitialized() const {
  return true;
}

void DBQueryRequest::Swap(DBQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBQueryRequest::InternalSwap(DBQueryRequest* other) {
  using std::swap;
  query_string_.Swap(&other->query_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dbname_.Swap(&other->dbname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DBQueryRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DBQueryResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBQueryResponse::kDbResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBQueryResponse::DBQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_DBQueryResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.DBQueryResponse)
}
DBQueryResponse::DBQueryResponse(const DBQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_response().size() > 0) {
    db_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_response_);
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.DBQueryResponse)
}

void DBQueryResponse::SharedCtor() {
  db_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DBQueryResponse::~DBQueryResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.DBQueryResponse)
  SharedDtor();
}

void DBQueryResponse::SharedDtor() {
  db_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DBQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DBQueryResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBQueryResponse& DBQueryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_DBQueryResponse.base);
  return *internal_default_instance();
}


void DBQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.DBQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DBQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.DBQueryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string db_response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_response()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_response().data(), static_cast<int>(this->db_response().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.DBQueryResponse.db_response"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.DBQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.DBQueryResponse)
  return false;
#undef DO_
}

void DBQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.DBQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_response = 1;
  if (this->db_response().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_response().data(), static_cast<int>(this->db_response().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBQueryResponse.db_response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_response(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.DBQueryResponse)
}

::google::protobuf::uint8* DBQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.DBQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_response = 1;
  if (this->db_response().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_response().data(), static_cast<int>(this->db_response().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.DBQueryResponse.db_response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_response(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.DBQueryResponse)
  return target;
}

size_t DBQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.DBQueryResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_response = 1;
  if (this->db_response().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.DBQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DBQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.DBQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.DBQueryResponse)
    MergeFrom(*source);
  }
}

void DBQueryResponse::MergeFrom(const DBQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.DBQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_response().size() > 0) {

    db_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_response_);
  }
}

void DBQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.DBQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBQueryResponse::CopyFrom(const DBQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.DBQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBQueryResponse::IsInitialized() const {
  return true;
}

void DBQueryResponse::Swap(DBQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBQueryResponse::InternalSwap(DBQueryResponse* other) {
  using std::swap;
  db_response_.Swap(&other->db_response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DBQueryResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableRequest::TableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_TableRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.TableRequest)
}
TableRequest::TableRequest(const TableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.TableRequest)
}

void TableRequest::SharedCtor() {
}

TableRequest::~TableRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.TableRequest)
  SharedDtor();
}

void TableRequest::SharedDtor() {
}

void TableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TableRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableRequest& TableRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_TableRequest.base);
  return *internal_default_instance();
}


void TableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.TableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.TableRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.TableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.TableRequest)
  return false;
#undef DO_
}

void TableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.TableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.TableRequest)
}

::google::protobuf::uint8* TableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.TableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.TableRequest)
  return target;
}

size_t TableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.TableRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.TableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.TableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.TableRequest)
    MergeFrom(*source);
  }
}

void TableRequest::MergeFrom(const TableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.TableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.TableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableRequest::CopyFrom(const TableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.TableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRequest::IsInitialized() const {
  return true;
}

void TableRequest::Swap(TableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableRequest::InternalSwap(TableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TableRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableResponse::InitAsDefaultInstance() {
  ::vaultdb::_TableResponse_default_instance_._instance.get_mutable()->t_ = const_cast< ::vaultdb::Table*>(
      ::vaultdb::Table::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableResponse::kTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableResponse::TableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_TableResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.TableResponse)
}
TableResponse::TableResponse(const TableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_t()) {
    t_ = new ::vaultdb::Table(*from.t_);
  } else {
    t_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.TableResponse)
}

void TableResponse::SharedCtor() {
  t_ = NULL;
}

TableResponse::~TableResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.TableResponse)
  SharedDtor();
}

void TableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete t_;
}

void TableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TableResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableResponse& TableResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_TableResponse.base);
  return *internal_default_instance();
}


void TableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.TableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && t_ != NULL) {
    delete t_;
  }
  t_ = NULL;
  _internal_metadata_.Clear();
}

bool TableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.TableResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.Table t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_t()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.TableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.TableResponse)
  return false;
#undef DO_
}

void TableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.TableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.Table t = 1;
  if (this->has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_t(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.TableResponse)
}

::google::protobuf::uint8* TableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.TableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.Table t = 1;
  if (this->has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_t(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.TableResponse)
  return target;
}

size_t TableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.TableResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vaultdb.Table t = 1;
  if (this->has_t()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *t_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.TableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.TableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.TableResponse)
    MergeFrom(*source);
  }
}

void TableResponse::MergeFrom(const TableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.TableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_t()) {
    mutable_t()->::vaultdb::Table::MergeFrom(from.t());
  }
}

void TableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.TableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableResponse::CopyFrom(const TableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.TableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableResponse::IsInitialized() const {
  return true;
}

void TableResponse::Swap(TableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableResponse::InternalSwap(TableResponse* other) {
  using std::swap;
  swap(t_, other->t_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TableResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void schema::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int schema::kQFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

schema::schema()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_schema.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.schema)
}
schema::schema(const schema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      q_(from.q_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vaultdb.schema)
}

void schema::SharedCtor() {
}

schema::~schema() {
  // @@protoc_insertion_point(destructor:vaultdb.schema)
  SharedDtor();
}

void schema::SharedDtor() {
}

void schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* schema::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const schema& schema::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_schema.base);
  return *internal_default_instance();
}


void schema::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  q_.Clear();
  _internal_metadata_.Clear();
}

bool schema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.schema)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vaultdb.Table q = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_q()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.schema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.schema)
  return false;
#undef DO_
}

void schema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.Table q = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->q_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->q(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.schema)
}

::google::protobuf::uint8* schema::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vaultdb.Table q = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->q_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->q(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.schema)
  return target;
}

size_t schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.schema)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vaultdb.Table q = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->q_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->q(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void schema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.schema)
  GOOGLE_DCHECK_NE(&from, this);
  const schema* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const schema>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.schema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.schema)
    MergeFrom(*source);
  }
}

void schema::MergeFrom(const schema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.schema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  q_.MergeFrom(from.q_);
}

void schema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void schema::CopyFrom(const schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool schema::IsInitialized() const {
  return true;
}

void schema::Swap(schema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void schema::InternalSwap(schema* other) {
  using std::swap;
  CastToBase(&q_)->InternalSwap(CastToBase(&other->q_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata schema::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableStream::InitAsDefaultInstance() {
  ::vaultdb::_TableStream_default_instance_._instance.get_mutable()->t_ = const_cast< ::vaultdb::Table*>(
      ::vaultdb::Table::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableStream::kTFieldNumber;
const int TableStream::kPageNoFieldNumber;
const int TableStream::kPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableStream::TableStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_TableStream.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.TableStream)
}
TableStream::TableStream(const TableStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page().size() > 0) {
    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  if (from.has_t()) {
    t_ = new ::vaultdb::Table(*from.t_);
  } else {
    t_ = NULL;
  }
  page_no_ = from.page_no_;
  // @@protoc_insertion_point(copy_constructor:vaultdb.TableStream)
}

void TableStream::SharedCtor() {
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_no_) -
      reinterpret_cast<char*>(&t_)) + sizeof(page_no_));
}

TableStream::~TableStream() {
  // @@protoc_insertion_point(destructor:vaultdb.TableStream)
  SharedDtor();
}

void TableStream::SharedDtor() {
  page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete t_;
}

void TableStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TableStream::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableStream& TableStream::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_TableStream.base);
  return *internal_default_instance();
}


void TableStream::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.TableStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && t_ != NULL) {
    delete t_;
  }
  t_ = NULL;
  page_no_ = 0;
  _internal_metadata_.Clear();
}

bool TableStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.TableStream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.Table t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_t()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_no = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes page = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.TableStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.TableStream)
  return false;
#undef DO_
}

void TableStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.TableStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.Table t = 1;
  if (this->has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_t(), output);
  }

  // int32 page_no = 3;
  if (this->page_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_no(), output);
  }

  // bytes page = 4;
  if (this->page().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->page(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.TableStream)
}

::google::protobuf::uint8* TableStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.TableStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.Table t = 1;
  if (this->has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_t(), deterministic, target);
  }

  // int32 page_no = 3;
  if (this->page_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_no(), target);
  }

  // bytes page = 4;
  if (this->page().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->page(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.TableStream)
  return target;
}

size_t TableStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.TableStream)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page = 4;
  if (this->page().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page());
  }

  // .vaultdb.Table t = 1;
  if (this->has_t()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // int32 page_no = 3;
  if (this->page_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.TableStream)
  GOOGLE_DCHECK_NE(&from, this);
  const TableStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.TableStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.TableStream)
    MergeFrom(*source);
  }
}

void TableStream::MergeFrom(const TableStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.TableStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page().size() > 0) {

    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  if (from.has_t()) {
    mutable_t()->::vaultdb::Table::MergeFrom(from.t());
  }
  if (from.page_no() != 0) {
    set_page_no(from.page_no());
  }
}

void TableStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.TableStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableStream::CopyFrom(const TableStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.TableStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStream::IsInitialized() const {
  return true;
}

void TableStream::Swap(TableStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableStream::InternalSwap(TableStream* other) {
  using std::swap;
  page_.Swap(&other->page_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(t_, other->t_);
  swap(page_no_, other->page_no_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TableStream::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Expr::InitAsDefaultInstance() {
  ::vaultdb::_Expr_default_instance_._instance.get_mutable()->desc_ = const_cast< ::vaultdb::FieldDesc*>(
      ::vaultdb::FieldDesc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Expr::kTypeFieldNumber;
const int Expr::kColnoFieldNumber;
const int Expr::kDescFieldNumber;
const int Expr::kIntfieldFieldNumber;
const int Expr::kCharfieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Expr::Expr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_Expr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.Expr)
}
Expr::Expr(const Expr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charfield_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.charfield().size() > 0) {
    charfield_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charfield_);
  }
  if (from.has_desc()) {
    desc_ = new ::vaultdb::FieldDesc(*from.desc_);
  } else {
    desc_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&intfield_) -
    reinterpret_cast<char*>(&type_)) + sizeof(intfield_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.Expr)
}

void Expr::SharedCtor() {
  charfield_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intfield_) -
      reinterpret_cast<char*>(&desc_)) + sizeof(intfield_));
}

Expr::~Expr() {
  // @@protoc_insertion_point(destructor:vaultdb.Expr)
  SharedDtor();
}

void Expr::SharedDtor() {
  charfield_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete desc_;
}

void Expr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Expr::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Expr& Expr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_Expr.base);
  return *internal_default_instance();
}


void Expr::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.Expr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charfield_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && desc_ != NULL) {
    delete desc_;
  }
  desc_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intfield_) -
      reinterpret_cast<char*>(&type_)) + sizeof(intfield_));
  _internal_metadata_.Clear();
}

bool Expr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.Expr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vaultdb.Expr.ExprType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vaultdb::Expr_ExprType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 colno = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vaultdb.FieldDesc desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 intfield = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intfield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string charfield = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charfield()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->charfield().data(), static_cast<int>(this->charfield().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.Expr.charfield"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.Expr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.Expr)
  return false;
#undef DO_
}

void Expr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.Expr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.Expr.ExprType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 colno = 2;
  if (this->colno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->colno(), output);
  }

  // .vaultdb.FieldDesc desc = 3;
  if (this->has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_desc(), output);
  }

  // int32 intfield = 4;
  if (this->intfield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->intfield(), output);
  }

  // string charfield = 5;
  if (this->charfield().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->charfield().data(), static_cast<int>(this->charfield().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.Expr.charfield");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->charfield(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.Expr)
}

::google::protobuf::uint8* Expr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.Expr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vaultdb.Expr.ExprType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 colno = 2;
  if (this->colno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->colno(), target);
  }

  // .vaultdb.FieldDesc desc = 3;
  if (this->has_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_desc(), deterministic, target);
  }

  // int32 intfield = 4;
  if (this->intfield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->intfield(), target);
  }

  // string charfield = 5;
  if (this->charfield().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->charfield().data(), static_cast<int>(this->charfield().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.Expr.charfield");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->charfield(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.Expr)
  return target;
}

size_t Expr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.Expr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string charfield = 5;
  if (this->charfield().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->charfield());
  }

  // .vaultdb.FieldDesc desc = 3;
  if (this->has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *desc_);
  }

  // .vaultdb.Expr.ExprType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 colno = 2;
  if (this->colno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colno());
  }

  // int32 intfield = 4;
  if (this->intfield() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->intfield());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  const Expr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Expr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.Expr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.Expr)
    MergeFrom(*source);
  }
}

void Expr::MergeFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.charfield().size() > 0) {

    charfield_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charfield_);
  }
  if (from.has_desc()) {
    mutable_desc()->::vaultdb::FieldDesc::MergeFrom(from.desc());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.colno() != 0) {
    set_colno(from.colno());
  }
  if (from.intfield() != 0) {
    set_intfield(from.intfield());
  }
}

void Expr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr::CopyFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  return true;
}

void Expr::Swap(Expr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Expr::InternalSwap(Expr* other) {
  using std::swap;
  charfield_.Swap(&other->charfield_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(desc_, other->desc_);
  swap(type_, other->type_);
  swap(colno_, other->colno_);
  swap(intfield_, other->intfield_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Expr::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Table::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kNumTuplePagesFieldNumber;
const int Table::kNumTuplesFieldNumber;
const int Table::kSizeOfTupleFieldNumber;
const int Table::kSchemaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_Table.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schema().size() > 0) {
    schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  ::memcpy(&num_tuple_pages_, &from.num_tuple_pages_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_of_tuple_) -
    reinterpret_cast<char*>(&num_tuple_pages_)) + sizeof(size_of_tuple_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.Table)
}

void Table::SharedCtor() {
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_tuple_pages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_of_tuple_) -
      reinterpret_cast<char*>(&num_tuple_pages_)) + sizeof(size_of_tuple_));
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:vaultdb.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  schema_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table& Table::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_Table.base);
  return *internal_default_instance();
}


void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_tuple_pages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_of_tuple_) -
      reinterpret_cast<char*>(&num_tuple_pages_)) + sizeof(size_of_tuple_));
  _internal_metadata_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.Table)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_tuple_pages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tuple_pages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_tuples = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tuples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size_of_tuple = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_of_tuple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes schema = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_tuple_pages = 1;
  if (this->num_tuple_pages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_tuple_pages(), output);
  }

  // int32 num_tuples = 2;
  if (this->num_tuples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_tuples(), output);
  }

  // int32 size_of_tuple = 3;
  if (this->size_of_tuple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size_of_tuple(), output);
  }

  // bytes schema = 4;
  if (this->schema().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->schema(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_tuple_pages = 1;
  if (this->num_tuple_pages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_tuple_pages(), target);
  }

  // int32 num_tuples = 2;
  if (this->num_tuples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_tuples(), target);
  }

  // int32 size_of_tuple = 3;
  if (this->size_of_tuple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size_of_tuple(), target);
  }

  // bytes schema = 4;
  if (this->schema().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->schema(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.Table)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes schema = 4;
  if (this->schema().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->schema());
  }

  // int32 num_tuple_pages = 1;
  if (this->num_tuple_pages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tuple_pages());
  }

  // int32 num_tuples = 2;
  if (this->num_tuples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tuples());
  }

  // int32 size_of_tuple = 3;
  if (this->size_of_tuple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_of_tuple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schema().size() > 0) {

    schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  if (from.num_tuple_pages() != 0) {
    set_num_tuple_pages(from.num_tuple_pages());
  }
  if (from.num_tuples() != 0) {
    set_num_tuples(from.num_tuples());
  }
  if (from.size_of_tuple() != 0) {
    set_size_of_tuple(from.size_of_tuple());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  using std::swap;
  schema_.Swap(&other->schema_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_tuple_pages_, other->num_tuple_pages_);
  swap(num_tuples_, other->num_tuples_);
  swap(size_of_tuple_, other->size_of_tuple_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TuplePage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TuplePage::kPageNoFieldNumber;
const int TuplePage::kPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TuplePage::TuplePage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_TuplePage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.TuplePage)
}
TuplePage::TuplePage(const TuplePage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page().size() > 0) {
    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  page_no_ = from.page_no_;
  // @@protoc_insertion_point(copy_constructor:vaultdb.TuplePage)
}

void TuplePage::SharedCtor() {
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_no_ = 0;
}

TuplePage::~TuplePage() {
  // @@protoc_insertion_point(destructor:vaultdb.TuplePage)
  SharedDtor();
}

void TuplePage::SharedDtor() {
  page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TuplePage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TuplePage::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TuplePage& TuplePage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_TuplePage.base);
  return *internal_default_instance();
}


void TuplePage::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.TuplePage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_no_ = 0;
  _internal_metadata_.Clear();
}

bool TuplePage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.TuplePage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 page_no = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.TuplePage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.TuplePage)
  return false;
#undef DO_
}

void TuplePage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.TuplePage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_no = 1;
  if (this->page_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page_no(), output);
  }

  // bytes page = 2;
  if (this->page().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->page(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.TuplePage)
}

::google::protobuf::uint8* TuplePage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.TuplePage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_no = 1;
  if (this->page_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page_no(), target);
  }

  // bytes page = 2;
  if (this->page().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->page(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.TuplePage)
  return target;
}

size_t TuplePage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.TuplePage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page = 2;
  if (this->page().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page());
  }

  // int32 page_no = 1;
  if (this->page_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuplePage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.TuplePage)
  GOOGLE_DCHECK_NE(&from, this);
  const TuplePage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TuplePage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.TuplePage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.TuplePage)
    MergeFrom(*source);
  }
}

void TuplePage::MergeFrom(const TuplePage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.TuplePage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page().size() > 0) {

    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  if (from.page_no() != 0) {
    set_page_no(from.page_no());
  }
}

void TuplePage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.TuplePage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuplePage::CopyFrom(const TuplePage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.TuplePage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuplePage::IsInitialized() const {
  return true;
}

void TuplePage::Swap(TuplePage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TuplePage::InternalSwap(TuplePage* other) {
  using std::swap;
  page_.Swap(&other->page_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_no_, other->page_no_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TuplePage::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FieldDesc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldDesc::kFieldNameFieldNumber;
const int FieldDesc::kColNoFieldNumber;
const int FieldDesc::kFieldTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldDesc::FieldDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_FieldDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.FieldDesc)
}
FieldDesc::FieldDesc(const FieldDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field_name().size() > 0) {
    field_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  ::memcpy(&col_no_, &from.col_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_type_) -
    reinterpret_cast<char*>(&col_no_)) + sizeof(field_type_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.FieldDesc)
}

void FieldDesc::SharedCtor() {
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&col_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_type_) -
      reinterpret_cast<char*>(&col_no_)) + sizeof(field_type_));
}

FieldDesc::~FieldDesc() {
  // @@protoc_insertion_point(destructor:vaultdb.FieldDesc)
  SharedDtor();
}

void FieldDesc::SharedDtor() {
  field_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FieldDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FieldDesc::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldDesc& FieldDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_FieldDesc.base);
  return *internal_default_instance();
}


void FieldDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.FieldDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&col_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_type_) -
      reinterpret_cast<char*>(&col_no_)) + sizeof(field_type_));
  _internal_metadata_.Clear();
}

bool FieldDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.FieldDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string field_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.FieldDesc.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 col_no = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vaultdb.FieldDesc.FieldType field_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_field_type(static_cast< ::vaultdb::FieldDesc_FieldType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.FieldDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.FieldDesc)
  return false;
#undef DO_
}

void FieldDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.FieldDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.FieldDesc.field_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field_name(), output);
  }

  // int32 col_no = 2;
  if (this->col_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col_no(), output);
  }

  // .vaultdb.FieldDesc.FieldType field_type = 3;
  if (this->field_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->field_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.FieldDesc)
}

::google::protobuf::uint8* FieldDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.FieldDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.FieldDesc.field_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // int32 col_no = 2;
  if (this->col_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col_no(), target);
  }

  // .vaultdb.FieldDesc.FieldType field_type = 3;
  if (this->field_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->field_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.FieldDesc)
  return target;
}

size_t FieldDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.FieldDesc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string field_name = 1;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  // int32 col_no = 2;
  if (this->col_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col_no());
  }

  // .vaultdb.FieldDesc.FieldType field_type = 3;
  if (this->field_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->field_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.FieldDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.FieldDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.FieldDesc)
    MergeFrom(*source);
  }
}

void FieldDesc::MergeFrom(const FieldDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.FieldDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.col_no() != 0) {
    set_col_no(from.col_no());
  }
  if (from.field_type() != 0) {
    set_field_type(from.field_type());
  }
}

void FieldDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.FieldDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldDesc::CopyFrom(const FieldDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.FieldDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldDesc::IsInitialized() const {
  return true;
}

void FieldDesc::Swap(FieldDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldDesc::InternalSwap(FieldDesc* other) {
  using std::swap;
  field_name_.Swap(&other->field_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(col_no_, other->col_no_);
  swap(field_type_, other->field_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FieldDesc::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Schema::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schema::kNumFieldsFieldNumber;
const int Schema::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schema::Schema()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_Schema.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.Schema)
}
Schema::Schema(const Schema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_fields_ = from.num_fields_;
  // @@protoc_insertion_point(copy_constructor:vaultdb.Schema)
}

void Schema::SharedCtor() {
  num_fields_ = 0;
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:vaultdb.Schema)
  SharedDtor();
}

void Schema::SharedDtor() {
}

void Schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Schema::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Schema& Schema::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_Schema.base);
  return *internal_default_instance();
}


void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  num_fields_ = 0;
  _internal_metadata_.Clear();
}

bool Schema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.Schema)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_fields_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vaultdb.FieldDesc field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.Schema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.Schema)
  return false;
#undef DO_
}

void Schema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_fields = 1;
  if (this->num_fields() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_fields(), output);
  }

  // repeated .vaultdb.FieldDesc field = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->field(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.Schema)
}

::google::protobuf::uint8* Schema::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_fields = 1;
  if (this->num_fields() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_fields(), target);
  }

  // repeated .vaultdb.FieldDesc field = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->field(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.Schema)
  return target;
}

size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.Schema)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vaultdb.FieldDesc field = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->field_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field(static_cast<int>(i)));
    }
  }

  // int32 num_fields = 1;
  if (this->num_fields() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_fields());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  const Schema* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Schema>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.Schema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.Schema)
    MergeFrom(*source);
  }
}

void Schema::MergeFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  if (from.num_fields() != 0) {
    set_num_fields(from.num_fields());
  }
}

void Schema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  return true;
}

void Schema::Swap(Schema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schema::InternalSwap(Schema* other) {
  using std::swap;
  CastToBase(&field_)->InternalSwap(CastToBase(&other->field_));
  swap(num_fields_, other->num_fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Schema::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SortDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SortDef::kColnoFieldNumber;
const int SortDef::kAscendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SortDef::SortDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_SortDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.SortDef)
}
SortDef::SortDef(const SortDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&colno_, &from.colno_,
    static_cast<size_t>(reinterpret_cast<char*>(&ascending_) -
    reinterpret_cast<char*>(&colno_)) + sizeof(ascending_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.SortDef)
}

void SortDef::SharedCtor() {
  ::memset(&colno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ascending_) -
      reinterpret_cast<char*>(&colno_)) + sizeof(ascending_));
}

SortDef::~SortDef() {
  // @@protoc_insertion_point(destructor:vaultdb.SortDef)
  SharedDtor();
}

void SortDef::SharedDtor() {
}

void SortDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SortDef::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SortDef& SortDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_SortDef.base);
  return *internal_default_instance();
}


void SortDef::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.SortDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&colno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ascending_) -
      reinterpret_cast<char*>(&colno_)) + sizeof(ascending_));
  _internal_metadata_.Clear();
}

bool SortDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.SortDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 colno = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ascending = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ascending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.SortDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.SortDef)
  return false;
#undef DO_
}

void SortDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.SortDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 colno = 1;
  if (this->colno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->colno(), output);
  }

  // bool ascending = 2;
  if (this->ascending() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ascending(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.SortDef)
}

::google::protobuf::uint8* SortDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.SortDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 colno = 1;
  if (this->colno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->colno(), target);
  }

  // bool ascending = 2;
  if (this->ascending() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ascending(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.SortDef)
  return target;
}

size_t SortDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.SortDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 colno = 1;
  if (this->colno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colno());
  }

  // bool ascending = 2;
  if (this->ascending() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.SortDef)
  GOOGLE_DCHECK_NE(&from, this);
  const SortDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SortDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.SortDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.SortDef)
    MergeFrom(*source);
  }
}

void SortDef::MergeFrom(const SortDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.SortDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.colno() != 0) {
    set_colno(from.colno());
  }
  if (from.ascending() != 0) {
    set_ascending(from.ascending());
  }
}

void SortDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.SortDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortDef::CopyFrom(const SortDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.SortDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortDef::IsInitialized() const {
  return true;
}

void SortDef::Swap(SortDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SortDef::InternalSwap(SortDef* other) {
  using std::swap;
  swap(colno_, other->colno_);
  swap(ascending_, other->ascending_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SortDef::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableQueryRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableQueryRequest::kDbnameFieldNumber;
const int TableQueryRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableQueryRequest::TableQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_TableQueryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.TableQueryRequest)
}
TableQueryRequest::TableQueryRequest(const TableQueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dbname().size() > 0) {
    dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:vaultdb.TableQueryRequest)
}

void TableQueryRequest::SharedCtor() {
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TableQueryRequest::~TableQueryRequest() {
  // @@protoc_insertion_point(destructor:vaultdb.TableQueryRequest)
  SharedDtor();
}

void TableQueryRequest::SharedDtor() {
  dbname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TableQueryRequest::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableQueryRequest& TableQueryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_TableQueryRequest.base);
  return *internal_default_instance();
}


void TableQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.TableQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TableQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.TableQueryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dbname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbname().data(), static_cast<int>(this->dbname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.TableQueryRequest.dbname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vaultdb.TableQueryRequest.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.TableQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.TableQueryRequest)
  return false;
#undef DO_
}

void TableQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.TableQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dbname = 1;
  if (this->dbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.TableQueryRequest.dbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dbname(), output);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.TableQueryRequest.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.TableQueryRequest)
}

::google::protobuf::uint8* TableQueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.TableQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dbname = 1;
  if (this->dbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.TableQueryRequest.dbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbname(), target);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vaultdb.TableQueryRequest.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.TableQueryRequest)
  return target;
}

size_t TableQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.TableQueryRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dbname = 1;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbname());
  }

  // string query = 2;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.TableQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TableQueryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableQueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.TableQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.TableQueryRequest)
    MergeFrom(*source);
  }
}

void TableQueryRequest::MergeFrom(const TableQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.TableQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dbname().size() > 0) {

    dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void TableQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.TableQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableQueryRequest::CopyFrom(const TableQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.TableQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableQueryRequest::IsInitialized() const {
  return true;
}

void TableQueryRequest::Swap(TableQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableQueryRequest::InternalSwap(TableQueryRequest* other) {
  using std::swap;
  dbname_.Swap(&other->dbname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TableQueryRequest::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableQueryResponse::InitAsDefaultInstance() {
  ::vaultdb::_TableQueryResponse_default_instance_._instance.get_mutable()->schema_ = const_cast< ::vaultdb::Schema*>(
      ::vaultdb::Schema::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableQueryResponse::kIsHeaderFieldNumber;
const int TableQueryResponse::kSchemaFieldNumber;
const int TableQueryResponse::kNumTuplesFieldNumber;
const int TableQueryResponse::kSizeOfTupleFieldNumber;
const int TableQueryResponse::kNumTuplePagesFieldNumber;
const int TableQueryResponse::kPageNoFieldNumber;
const int TableQueryResponse::kPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableQueryResponse::TableQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vaultdb_2eproto::scc_info_TableQueryResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vaultdb.TableQueryResponse)
}
TableQueryResponse::TableQueryResponse(const TableQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page().size() > 0) {
    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  if (from.has_schema()) {
    schema_ = new ::vaultdb::Schema(*from.schema_);
  } else {
    schema_ = NULL;
  }
  ::memcpy(&is_header_, &from.is_header_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_no_) -
    reinterpret_cast<char*>(&is_header_)) + sizeof(page_no_));
  // @@protoc_insertion_point(copy_constructor:vaultdb.TableQueryResponse)
}

void TableQueryResponse::SharedCtor() {
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&schema_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_no_) -
      reinterpret_cast<char*>(&schema_)) + sizeof(page_no_));
}

TableQueryResponse::~TableQueryResponse() {
  // @@protoc_insertion_point(destructor:vaultdb.TableQueryResponse)
  SharedDtor();
}

void TableQueryResponse::SharedDtor() {
  page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schema_;
}

void TableQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TableQueryResponse::descriptor() {
  ::protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableQueryResponse& TableQueryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vaultdb_2eproto::scc_info_TableQueryResponse.base);
  return *internal_default_instance();
}


void TableQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vaultdb.TableQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && schema_ != NULL) {
    delete schema_;
  }
  schema_ = NULL;
  ::memset(&is_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_no_) -
      reinterpret_cast<char*>(&is_header_)) + sizeof(page_no_));
  _internal_metadata_.Clear();
}

bool TableQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vaultdb.TableQueryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_header_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vaultdb.Schema schema = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_tuples = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tuples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size_of_tuple = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_of_tuple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_tuple_pages = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tuple_pages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_no = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes page = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vaultdb.TableQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vaultdb.TableQueryResponse)
  return false;
#undef DO_
}

void TableQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vaultdb.TableQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_header = 2;
  if (this->is_header() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_header(), output);
  }

  // .vaultdb.Schema schema = 3;
  if (this->has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_schema(), output);
  }

  // int32 num_tuples = 4;
  if (this->num_tuples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_tuples(), output);
  }

  // int32 size_of_tuple = 5;
  if (this->size_of_tuple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->size_of_tuple(), output);
  }

  // int32 num_tuple_pages = 6;
  if (this->num_tuple_pages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_tuple_pages(), output);
  }

  // int32 page_no = 7;
  if (this->page_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->page_no(), output);
  }

  // bytes page = 8;
  if (this->page().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->page(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vaultdb.TableQueryResponse)
}

::google::protobuf::uint8* TableQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vaultdb.TableQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_header = 2;
  if (this->is_header() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_header(), target);
  }

  // .vaultdb.Schema schema = 3;
  if (this->has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_schema(), deterministic, target);
  }

  // int32 num_tuples = 4;
  if (this->num_tuples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_tuples(), target);
  }

  // int32 size_of_tuple = 5;
  if (this->size_of_tuple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->size_of_tuple(), target);
  }

  // int32 num_tuple_pages = 6;
  if (this->num_tuple_pages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_tuple_pages(), target);
  }

  // int32 page_no = 7;
  if (this->page_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->page_no(), target);
  }

  // bytes page = 8;
  if (this->page().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->page(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vaultdb.TableQueryResponse)
  return target;
}

size_t TableQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vaultdb.TableQueryResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page = 8;
  if (this->page().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page());
  }

  // .vaultdb.Schema schema = 3;
  if (this->has_schema()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // bool is_header = 2;
  if (this->is_header() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_tuples = 4;
  if (this->num_tuples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tuples());
  }

  // int32 size_of_tuple = 5;
  if (this->size_of_tuple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_of_tuple());
  }

  // int32 num_tuple_pages = 6;
  if (this->num_tuple_pages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tuple_pages());
  }

  // int32 page_no = 7;
  if (this->page_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vaultdb.TableQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TableQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vaultdb.TableQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vaultdb.TableQueryResponse)
    MergeFrom(*source);
  }
}

void TableQueryResponse::MergeFrom(const TableQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vaultdb.TableQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page().size() > 0) {

    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  if (from.has_schema()) {
    mutable_schema()->::vaultdb::Schema::MergeFrom(from.schema());
  }
  if (from.is_header() != 0) {
    set_is_header(from.is_header());
  }
  if (from.num_tuples() != 0) {
    set_num_tuples(from.num_tuples());
  }
  if (from.size_of_tuple() != 0) {
    set_size_of_tuple(from.size_of_tuple());
  }
  if (from.num_tuple_pages() != 0) {
    set_num_tuple_pages(from.num_tuple_pages());
  }
  if (from.page_no() != 0) {
    set_page_no(from.page_no());
  }
}

void TableQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vaultdb.TableQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableQueryResponse::CopyFrom(const TableQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vaultdb.TableQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableQueryResponse::IsInitialized() const {
  return true;
}

void TableQueryResponse::Swap(TableQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableQueryResponse::InternalSwap(TableQueryResponse* other) {
  using std::swap;
  page_.Swap(&other->page_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(schema_, other->schema_);
  swap(is_header_, other->is_header_);
  swap(num_tuples_, other->num_tuples_);
  swap(size_of_tuple_, other->size_of_tuple_);
  swap(num_tuple_pages_, other->num_tuple_pages_);
  swap(page_no_, other->page_no_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TableQueryResponse::GetMetadata() const {
  protobuf_vaultdb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vaultdb_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vaultdb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::CoaleseTablesRequest* Arena::CreateMaybeMessage< ::vaultdb::CoaleseTablesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::CoaleseTablesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::CoaleseTablesResponse* Arena::CreateMaybeMessage< ::vaultdb::CoaleseTablesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::CoaleseTablesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::GetControlFlowColumnRequest* Arena::CreateMaybeMessage< ::vaultdb::GetControlFlowColumnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::GetControlFlowColumnRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::GetControlFlowColumnResponse* Arena::CreateMaybeMessage< ::vaultdb::GetControlFlowColumnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::GetControlFlowColumnResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::ControlFlowColumn* Arena::CreateMaybeMessage< ::vaultdb::ControlFlowColumn >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::ControlFlowColumn >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::RepartitionStepTwoRequest* Arena::CreateMaybeMessage< ::vaultdb::RepartitionStepTwoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::RepartitionStepTwoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::RepartitionStepTwoResponse* Arena::CreateMaybeMessage< ::vaultdb::RepartitionStepTwoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::RepartitionStepTwoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::RepartitionStepOneRequest* Arena::CreateMaybeMessage< ::vaultdb::RepartitionStepOneRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::RepartitionStepOneRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::TableID* Arena::CreateMaybeMessage< ::vaultdb::TableID >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::TableID >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::RepartitionStepOneResponse* Arena::CreateMaybeMessage< ::vaultdb::RepartitionStepOneResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::RepartitionStepOneResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::SendTableRequest* Arena::CreateMaybeMessage< ::vaultdb::SendTableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::SendTableRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::SendTableResponse* Arena::CreateMaybeMessage< ::vaultdb::SendTableResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::SendTableResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::KFilterRequest* Arena::CreateMaybeMessage< ::vaultdb::KFilterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::KFilterRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::KFilterResponse* Arena::CreateMaybeMessage< ::vaultdb::KFilterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::KFilterResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::KJoinRequest* Arena::CreateMaybeMessage< ::vaultdb::KJoinRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::KJoinRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::KJoinResponse* Arena::CreateMaybeMessage< ::vaultdb::KJoinResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::KJoinResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::GroupByDef* Arena::CreateMaybeMessage< ::vaultdb::GroupByDef >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::GroupByDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::KAggregateRequest* Arena::CreateMaybeMessage< ::vaultdb::KAggregateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::KAggregateRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::KAggregateResponse* Arena::CreateMaybeMessage< ::vaultdb::KAggregateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::KAggregateResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::JoinColID* Arena::CreateMaybeMessage< ::vaultdb::JoinColID >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::JoinColID >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::JoinDef* Arena::CreateMaybeMessage< ::vaultdb::JoinDef >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::JoinDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::KSortRequest* Arena::CreateMaybeMessage< ::vaultdb::KSortRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::KSortRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::KSortResponse* Arena::CreateMaybeMessage< ::vaultdb::KSortResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::KSortResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::GeneralizeRequest* Arena::CreateMaybeMessage< ::vaultdb::GeneralizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::GeneralizeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::GeneralizeResponse* Arena::CreateMaybeMessage< ::vaultdb::GeneralizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::GeneralizeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::PeerHostInfo* Arena::CreateMaybeMessage< ::vaultdb::PeerHostInfo >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::PeerHostInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::GetPeerHostsRequest* Arena::CreateMaybeMessage< ::vaultdb::GetPeerHostsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::GetPeerHostsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::GetPeerHostsResponse* Arena::CreateMaybeMessage< ::vaultdb::GetPeerHostsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::GetPeerHostsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::DBMSQueryRequest* Arena::CreateMaybeMessage< ::vaultdb::DBMSQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::DBMSQueryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::DBMSQueryResponse* Arena::CreateMaybeMessage< ::vaultdb::DBMSQueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::DBMSQueryResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::RegisterRequest* Arena::CreateMaybeMessage< ::vaultdb::RegisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::RegisterRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::RegisterResponse* Arena::CreateMaybeMessage< ::vaultdb::RegisterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::RegisterResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::NumHostsRequest* Arena::CreateMaybeMessage< ::vaultdb::NumHostsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::NumHostsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::NumHostResp* Arena::CreateMaybeMessage< ::vaultdb::NumHostResp >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::NumHostResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::DBQueryRequest* Arena::CreateMaybeMessage< ::vaultdb::DBQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::DBQueryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::DBQueryResponse* Arena::CreateMaybeMessage< ::vaultdb::DBQueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::DBQueryResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::TableRequest* Arena::CreateMaybeMessage< ::vaultdb::TableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::TableRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::TableResponse* Arena::CreateMaybeMessage< ::vaultdb::TableResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::TableResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::schema* Arena::CreateMaybeMessage< ::vaultdb::schema >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::schema >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::TableStream* Arena::CreateMaybeMessage< ::vaultdb::TableStream >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::TableStream >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::Expr* Arena::CreateMaybeMessage< ::vaultdb::Expr >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::Expr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::Table* Arena::CreateMaybeMessage< ::vaultdb::Table >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::Table >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::TuplePage* Arena::CreateMaybeMessage< ::vaultdb::TuplePage >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::TuplePage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::FieldDesc* Arena::CreateMaybeMessage< ::vaultdb::FieldDesc >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::FieldDesc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::Schema* Arena::CreateMaybeMessage< ::vaultdb::Schema >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::Schema >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::SortDef* Arena::CreateMaybeMessage< ::vaultdb::SortDef >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::SortDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::TableQueryRequest* Arena::CreateMaybeMessage< ::vaultdb::TableQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::TableQueryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vaultdb::TableQueryResponse* Arena::CreateMaybeMessage< ::vaultdb::TableQueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vaultdb::TableQueryResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
