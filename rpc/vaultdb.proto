syntax = "proto3";

package vaultdb;

service VaultDBOperators {
    rpc DBQuery (DBQueryRequest) returns (DBQueryResponse) {}
    rpc GetTableStream (TableRequest) returns (stream TableStream){}
    rpc GetTable (TableQueryRequest) returns (stream TableQueryResponse) {}
}

service HonestBroker {
    rpc NumHosts (NumHostsRequest) returns (NumHostResp) {}
    rpc Register (RegisterRequest) returns (RegisterResponse) {}
}

service DataOwner {
    rpc DBMSQuery (DBMSQueryRequest) returns (DBMSQueryResponse){}
    rpc GetPeerHosts (GetPeerHostsRequest) returns (GetPeerHostsResponse){}
    rpc KFilter (KFilterRequest) returns (KFilterResponse){}
    rpc KJoin (KJoinRequest) returns (KJoinResponse) {}
    rpc KSort (KSortRequest) returns (KSortResponse) {}
    rpc Generalize (GeneralizeRequest) returns (GeneralizeResponse) {}
}

message KFilterRequest {
    int32 tableID = 1;
}

message KFilterResponse {

}

message KJoinRequest {

}

message KJoinResponse {

}

message KSortRequest {

}

message KSortResponse {

}

message GeneralizeRequest {

}

message GeneralizeResponse {

}

message GetPeerHostsRequest {
    repeated string hostnames = 1;
}

message GetPeerHostsResponse {
    bool ok = 1;
}

message TableID {
    string dbname = 1;
    string query = 2;
    int32 hostnum = 3;
    int32 tableid = 4;
}

message DBMSQueryRequest {
    string dbname = 1;
    string query = 2;
}

message DBMSQueryResponse {
    TableID tableId = 1;
}

message RegisterRequest {
    string hostname = 1;
}

message RegisterResponse {
    int32 host_num = 1;
}

message NumHostsRequest {
}

message NumHostResp {
    int32 num_hosts = 1;
}

message DBQueryRequest {
    string query_string = 1;
    string dbname = 2;
}

message DBQueryResponse {
    string db_response = 1;
}

message TableRequest {

}

message TableResponse {
    Table t = 1;
}

message schema {
    repeated Table q = 2;
}

message TableStream {
    Table t = 1;
    int32 page_no = 3;
    bytes page = 4;
}

//TODO(madhavsuresh): do we need to serialize/unserialize the schema?
message Table {
    int32 num_tuple_pages = 1;
    int32 num_tuples = 2;
    int32 size_of_tuple = 3;
    bytes schema = 4;
}

message TuplePage {
    int32 page_no = 1;
    bytes page = 2;
}


message FieldDesc {
    string field_name = 1;
    int32 col_no = 2;

    enum FieldType {
        UNSUPPORTED = 0;
        FIXEDCHAR = 1;
        INT = 2;
    }
    FieldType field_type = 3;
}

message Schema {
    int32 num_fields = 1;
    repeated FieldDesc field = 2;
}

message TableQueryRequest {
    string dbname = 1;
    string query = 2;
}

message TableQueryResponse {
    // This message is unforuantely overloaded.
    // The first message in the stream is the metadata associated with
    // the query.
    bool is_header = 2;
    Schema schema = 3;
    int32 num_tuples = 4;
    int32 size_of_tuple = 5;
    int32 num_tuple_pages = 6;

    int32 page_no = 7;
    bytes page = 8;
}


