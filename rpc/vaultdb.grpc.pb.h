// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vaultdb.proto
#ifndef GRPC_vaultdb_2eproto__INCLUDED
#define GRPC_vaultdb_2eproto__INCLUDED

#include "vaultdb.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace vaultdb {

class VaultDBOperators final {
 public:
  static constexpr char const* service_full_name() {
    return "vaultdb.VaultDBOperators";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DBQuery(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::vaultdb::DBQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBQueryResponse>> AsyncDBQuery(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBQueryResponse>>(AsyncDBQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBQueryResponse>> PrepareAsyncDBQuery(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBQueryResponse>>(PrepareAsyncDBQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::vaultdb::TableStream>> GetTableStream(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::vaultdb::TableStream>>(GetTableStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableStream>> AsyncGetTableStream(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableStream>>(AsyncGetTableStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableStream>> PrepareAsyncGetTableStream(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableStream>>(PrepareAsyncGetTableStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::vaultdb::TableQueryResponse>> GetTable(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::vaultdb::TableQueryResponse>>(GetTableRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableQueryResponse>> AsyncGetTable(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableQueryResponse>>(AsyncGetTableRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableQueryResponse>> PrepareAsyncGetTable(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableQueryResponse>>(PrepareAsyncGetTableRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBQueryResponse>* AsyncDBQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBQueryResponse>* PrepareAsyncDBQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::vaultdb::TableStream>* GetTableStreamRaw(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableStream>* AsyncGetTableStreamRaw(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableStream>* PrepareAsyncGetTableStreamRaw(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::vaultdb::TableQueryResponse>* GetTableRaw(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableQueryResponse>* AsyncGetTableRaw(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vaultdb::TableQueryResponse>* PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DBQuery(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::vaultdb::DBQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::DBQueryResponse>> AsyncDBQuery(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::DBQueryResponse>>(AsyncDBQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::DBQueryResponse>> PrepareAsyncDBQuery(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::DBQueryResponse>>(PrepareAsyncDBQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::vaultdb::TableStream>> GetTableStream(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::vaultdb::TableStream>>(GetTableStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vaultdb::TableStream>> AsyncGetTableStream(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vaultdb::TableStream>>(AsyncGetTableStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vaultdb::TableStream>> PrepareAsyncGetTableStream(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vaultdb::TableStream>>(PrepareAsyncGetTableStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::vaultdb::TableQueryResponse>> GetTable(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::vaultdb::TableQueryResponse>>(GetTableRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vaultdb::TableQueryResponse>> AsyncGetTable(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vaultdb::TableQueryResponse>>(AsyncGetTableRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vaultdb::TableQueryResponse>> PrepareAsyncGetTable(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vaultdb::TableQueryResponse>>(PrepareAsyncGetTableRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::DBQueryResponse>* AsyncDBQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::DBQueryResponse>* PrepareAsyncDBQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::vaultdb::TableStream>* GetTableStreamRaw(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request) override;
    ::grpc::ClientAsyncReader< ::vaultdb::TableStream>* AsyncGetTableStreamRaw(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::vaultdb::TableStream>* PrepareAsyncGetTableStreamRaw(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::vaultdb::TableQueryResponse>* GetTableRaw(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request) override;
    ::grpc::ClientAsyncReader< ::vaultdb::TableQueryResponse>* AsyncGetTableRaw(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::vaultdb::TableQueryResponse>* PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DBQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTableStream_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTable_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DBQuery(::grpc::ServerContext* context, const ::vaultdb::DBQueryRequest* request, ::vaultdb::DBQueryResponse* response);
    virtual ::grpc::Status GetTableStream(::grpc::ServerContext* context, const ::vaultdb::TableRequest* request, ::grpc::ServerWriter< ::vaultdb::TableStream>* writer);
    virtual ::grpc::Status GetTable(::grpc::ServerContext* context, const ::vaultdb::TableQueryRequest* request, ::grpc::ServerWriter< ::vaultdb::TableQueryResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_DBQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DBQuery() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DBQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DBQuery(::grpc::ServerContext* context, const ::vaultdb::DBQueryRequest* request, ::vaultdb::DBQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDBQuery(::grpc::ServerContext* context, ::vaultdb::DBQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::DBQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTableStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTableStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTableStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTableStream(::grpc::ServerContext* context, const ::vaultdb::TableRequest* request, ::grpc::ServerWriter< ::vaultdb::TableStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTableStream(::grpc::ServerContext* context, ::vaultdb::TableRequest* request, ::grpc::ServerAsyncWriter< ::vaultdb::TableStream>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTable() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* context, const ::vaultdb::TableQueryRequest* request, ::grpc::ServerWriter< ::vaultdb::TableQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTable(::grpc::ServerContext* context, ::vaultdb::TableQueryRequest* request, ::grpc::ServerAsyncWriter< ::vaultdb::TableQueryResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DBQuery<WithAsyncMethod_GetTableStream<WithAsyncMethod_GetTable<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_DBQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DBQuery() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DBQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DBQuery(::grpc::ServerContext* context, const ::vaultdb::DBQueryRequest* request, ::vaultdb::DBQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTableStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTableStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTableStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTableStream(::grpc::ServerContext* context, const ::vaultdb::TableRequest* request, ::grpc::ServerWriter< ::vaultdb::TableStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTable() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* context, const ::vaultdb::TableQueryRequest* request, ::grpc::ServerWriter< ::vaultdb::TableQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DBQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DBQuery() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DBQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DBQuery(::grpc::ServerContext* context, const ::vaultdb::DBQueryRequest* request, ::vaultdb::DBQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDBQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTableStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTableStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTableStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTableStream(::grpc::ServerContext* context, const ::vaultdb::TableRequest* request, ::grpc::ServerWriter< ::vaultdb::TableStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTableStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTable() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* context, const ::vaultdb::TableQueryRequest* request, ::grpc::ServerWriter< ::vaultdb::TableQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DBQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DBQuery() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::DBQueryRequest, ::vaultdb::DBQueryResponse>(std::bind(&WithStreamedUnaryMethod_DBQuery<BaseClass>::StreamedDBQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DBQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DBQuery(::grpc::ServerContext* context, const ::vaultdb::DBQueryRequest* request, ::vaultdb::DBQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDBQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::DBQueryRequest,::vaultdb::DBQueryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DBQuery<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetTableStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetTableStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::vaultdb::TableRequest, ::vaultdb::TableStream>(std::bind(&WithSplitStreamingMethod_GetTableStream<BaseClass>::StreamedGetTableStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetTableStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTableStream(::grpc::ServerContext* context, const ::vaultdb::TableRequest* request, ::grpc::ServerWriter< ::vaultdb::TableStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetTableStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::vaultdb::TableRequest,::vaultdb::TableStream>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetTable() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::vaultdb::TableQueryRequest, ::vaultdb::TableQueryResponse>(std::bind(&WithSplitStreamingMethod_GetTable<BaseClass>::StreamedGetTable, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* context, const ::vaultdb::TableQueryRequest* request, ::grpc::ServerWriter< ::vaultdb::TableQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetTable(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::vaultdb::TableQueryRequest,::vaultdb::TableQueryResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetTableStream<WithSplitStreamingMethod_GetTable<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_DBQuery<WithSplitStreamingMethod_GetTableStream<WithSplitStreamingMethod_GetTable<Service > > > StreamedService;
};

class HonestBroker final {
 public:
  static constexpr char const* service_full_name() {
    return "vaultdb.HonestBroker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NumHosts(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::vaultdb::NumHostResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::NumHostResp>> AsyncNumHosts(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::NumHostResp>>(AsyncNumHostsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::NumHostResp>> PrepareAsyncNumHosts(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::NumHostResp>>(PrepareAsyncNumHostsRaw(context, request, cq));
    }
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::vaultdb::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status GetControlFlowColumn(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::vaultdb::GetControlFlowColumnResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetControlFlowColumnResponse>> AsyncGetControlFlowColumn(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetControlFlowColumnResponse>>(AsyncGetControlFlowColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetControlFlowColumnResponse>> PrepareAsyncGetControlFlowColumn(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetControlFlowColumnResponse>>(PrepareAsyncGetControlFlowColumnRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::NumHostResp>* AsyncNumHostsRaw(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::NumHostResp>* PrepareAsyncNumHostsRaw(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetControlFlowColumnResponse>* AsyncGetControlFlowColumnRaw(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetControlFlowColumnResponse>* PrepareAsyncGetControlFlowColumnRaw(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NumHosts(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::vaultdb::NumHostResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::NumHostResp>> AsyncNumHosts(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::NumHostResp>>(AsyncNumHostsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::NumHostResp>> PrepareAsyncNumHosts(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::NumHostResp>>(PrepareAsyncNumHostsRaw(context, request, cq));
    }
    ::grpc::Status Register(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::vaultdb::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status GetControlFlowColumn(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::vaultdb::GetControlFlowColumnResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GetControlFlowColumnResponse>> AsyncGetControlFlowColumn(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GetControlFlowColumnResponse>>(AsyncGetControlFlowColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GetControlFlowColumnResponse>> PrepareAsyncGetControlFlowColumn(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GetControlFlowColumnResponse>>(PrepareAsyncGetControlFlowColumnRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::NumHostResp>* AsyncNumHostsRaw(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::NumHostResp>* PrepareAsyncNumHostsRaw(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::GetControlFlowColumnResponse>* AsyncGetControlFlowColumnRaw(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::GetControlFlowColumnResponse>* PrepareAsyncGetControlFlowColumnRaw(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NumHosts_;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_GetControlFlowColumn_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NumHosts(::grpc::ServerContext* context, const ::vaultdb::NumHostsRequest* request, ::vaultdb::NumHostResp* response);
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::vaultdb::RegisterRequest* request, ::vaultdb::RegisterResponse* response);
    virtual ::grpc::Status GetControlFlowColumn(::grpc::ServerContext* context, const ::vaultdb::GetControlFlowColumnRequest* request, ::vaultdb::GetControlFlowColumnResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NumHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NumHosts() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NumHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumHosts(::grpc::ServerContext* context, const ::vaultdb::NumHostsRequest* request, ::vaultdb::NumHostResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNumHosts(::grpc::ServerContext* context, ::vaultdb::NumHostsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::NumHostResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::vaultdb::RegisterRequest* request, ::vaultdb::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::vaultdb::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetControlFlowColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetControlFlowColumn() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetControlFlowColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControlFlowColumn(::grpc::ServerContext* context, const ::vaultdb::GetControlFlowColumnRequest* request, ::vaultdb::GetControlFlowColumnResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetControlFlowColumn(::grpc::ServerContext* context, ::vaultdb::GetControlFlowColumnRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::GetControlFlowColumnResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NumHosts<WithAsyncMethod_Register<WithAsyncMethod_GetControlFlowColumn<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_NumHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NumHosts() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NumHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumHosts(::grpc::ServerContext* context, const ::vaultdb::NumHostsRequest* request, ::vaultdb::NumHostResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::vaultdb::RegisterRequest* request, ::vaultdb::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetControlFlowColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetControlFlowColumn() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetControlFlowColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControlFlowColumn(::grpc::ServerContext* context, const ::vaultdb::GetControlFlowColumnRequest* request, ::vaultdb::GetControlFlowColumnResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NumHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_NumHosts() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NumHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumHosts(::grpc::ServerContext* context, const ::vaultdb::NumHostsRequest* request, ::vaultdb::NumHostResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNumHosts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::vaultdb::RegisterRequest* request, ::vaultdb::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetControlFlowColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetControlFlowColumn() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetControlFlowColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControlFlowColumn(::grpc::ServerContext* context, const ::vaultdb::GetControlFlowColumnRequest* request, ::vaultdb::GetControlFlowColumnResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetControlFlowColumn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NumHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NumHosts() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::NumHostsRequest, ::vaultdb::NumHostResp>(std::bind(&WithStreamedUnaryMethod_NumHosts<BaseClass>::StreamedNumHosts, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NumHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NumHosts(::grpc::ServerContext* context, const ::vaultdb::NumHostsRequest* request, ::vaultdb::NumHostResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNumHosts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::NumHostsRequest,::vaultdb::NumHostResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::RegisterRequest, ::vaultdb::RegisterResponse>(std::bind(&WithStreamedUnaryMethod_Register<BaseClass>::StreamedRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::vaultdb::RegisterRequest* request, ::vaultdb::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::RegisterRequest,::vaultdb::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetControlFlowColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetControlFlowColumn() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::GetControlFlowColumnRequest, ::vaultdb::GetControlFlowColumnResponse>(std::bind(&WithStreamedUnaryMethod_GetControlFlowColumn<BaseClass>::StreamedGetControlFlowColumn, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetControlFlowColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetControlFlowColumn(::grpc::ServerContext* context, const ::vaultdb::GetControlFlowColumnRequest* request, ::vaultdb::GetControlFlowColumnResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetControlFlowColumn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::GetControlFlowColumnRequest,::vaultdb::GetControlFlowColumnResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NumHosts<WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_GetControlFlowColumn<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NumHosts<WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_GetControlFlowColumn<Service > > > StreamedService;
};

class DataOwner final {
 public:
  static constexpr char const* service_full_name() {
    return "vaultdb.DataOwner";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DBMSQuery(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::vaultdb::DBMSQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBMSQueryResponse>> AsyncDBMSQuery(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBMSQueryResponse>>(AsyncDBMSQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBMSQueryResponse>> PrepareAsyncDBMSQuery(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBMSQueryResponse>>(PrepareAsyncDBMSQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPeerHosts(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::vaultdb::GetPeerHostsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetPeerHostsResponse>> AsyncGetPeerHosts(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetPeerHostsResponse>>(AsyncGetPeerHostsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetPeerHostsResponse>> PrepareAsyncGetPeerHosts(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetPeerHostsResponse>>(PrepareAsyncGetPeerHostsRaw(context, request, cq));
    }
    virtual ::grpc::Status KFilter(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::vaultdb::KFilterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KFilterResponse>> AsyncKFilter(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KFilterResponse>>(AsyncKFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KFilterResponse>> PrepareAsyncKFilter(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KFilterResponse>>(PrepareAsyncKFilterRaw(context, request, cq));
    }
    virtual ::grpc::Status KJoin(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::vaultdb::KJoinResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KJoinResponse>> AsyncKJoin(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KJoinResponse>>(AsyncKJoinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KJoinResponse>> PrepareAsyncKJoin(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KJoinResponse>>(PrepareAsyncKJoinRaw(context, request, cq));
    }
    virtual ::grpc::Status KSort(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::vaultdb::KSortResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KSortResponse>> AsyncKSort(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KSortResponse>>(AsyncKSortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KSortResponse>> PrepareAsyncKSort(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KSortResponse>>(PrepareAsyncKSortRaw(context, request, cq));
    }
    virtual ::grpc::Status Generalize(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::vaultdb::GeneralizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GeneralizeResponse>> AsyncGeneralize(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GeneralizeResponse>>(AsyncGeneralizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GeneralizeResponse>> PrepareAsyncGeneralize(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GeneralizeResponse>>(PrepareAsyncGeneralizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::vaultdb::SendTableRequest>> SendTable(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::vaultdb::SendTableRequest>>(SendTableRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::vaultdb::SendTableRequest>> AsyncSendTable(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::vaultdb::SendTableRequest>>(AsyncSendTableRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::vaultdb::SendTableRequest>> PrepareAsyncSendTable(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::vaultdb::SendTableRequest>>(PrepareAsyncSendTableRaw(context, response, cq));
    }
    virtual ::grpc::Status RepartitionStepOne(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::vaultdb::RepartitionStepOneResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepOneResponse>> AsyncRepartitionStepOne(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepOneResponse>>(AsyncRepartitionStepOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepOneResponse>> PrepareAsyncRepartitionStepOne(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepOneResponse>>(PrepareAsyncRepartitionStepOneRaw(context, request, cq));
    }
    virtual ::grpc::Status RepartitionStepTwo(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::vaultdb::RepartitionStepTwoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepTwoResponse>> AsyncRepartitionStepTwo(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepTwoResponse>>(AsyncRepartitionStepTwoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepTwoResponse>> PrepareAsyncRepartitionStepTwo(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepTwoResponse>>(PrepareAsyncRepartitionStepTwoRaw(context, request, cq));
    }
    virtual ::grpc::Status CoalesceTables(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::vaultdb::CoaleseTablesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::CoaleseTablesResponse>> AsyncCoalesceTables(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::CoaleseTablesResponse>>(AsyncCoalesceTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::CoaleseTablesResponse>> PrepareAsyncCoalesceTables(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::CoaleseTablesResponse>>(PrepareAsyncCoalesceTablesRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBMSQueryResponse>* AsyncDBMSQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::DBMSQueryResponse>* PrepareAsyncDBMSQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetPeerHostsResponse>* AsyncGetPeerHostsRaw(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GetPeerHostsResponse>* PrepareAsyncGetPeerHostsRaw(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KFilterResponse>* AsyncKFilterRaw(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KFilterResponse>* PrepareAsyncKFilterRaw(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KJoinResponse>* AsyncKJoinRaw(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KJoinResponse>* PrepareAsyncKJoinRaw(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KSortResponse>* AsyncKSortRaw(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::KSortResponse>* PrepareAsyncKSortRaw(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GeneralizeResponse>* AsyncGeneralizeRaw(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::GeneralizeResponse>* PrepareAsyncGeneralizeRaw(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::vaultdb::SendTableRequest>* SendTableRaw(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::vaultdb::SendTableRequest>* AsyncSendTableRaw(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::vaultdb::SendTableRequest>* PrepareAsyncSendTableRaw(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepOneResponse>* AsyncRepartitionStepOneRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepOneResponse>* PrepareAsyncRepartitionStepOneRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepTwoResponse>* AsyncRepartitionStepTwoRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::RepartitionStepTwoResponse>* PrepareAsyncRepartitionStepTwoRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::CoaleseTablesResponse>* AsyncCoalesceTablesRaw(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vaultdb::CoaleseTablesResponse>* PrepareAsyncCoalesceTablesRaw(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DBMSQuery(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::vaultdb::DBMSQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::DBMSQueryResponse>> AsyncDBMSQuery(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::DBMSQueryResponse>>(AsyncDBMSQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::DBMSQueryResponse>> PrepareAsyncDBMSQuery(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::DBMSQueryResponse>>(PrepareAsyncDBMSQueryRaw(context, request, cq));
    }
    ::grpc::Status GetPeerHosts(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::vaultdb::GetPeerHostsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GetPeerHostsResponse>> AsyncGetPeerHosts(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GetPeerHostsResponse>>(AsyncGetPeerHostsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GetPeerHostsResponse>> PrepareAsyncGetPeerHosts(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GetPeerHostsResponse>>(PrepareAsyncGetPeerHostsRaw(context, request, cq));
    }
    ::grpc::Status KFilter(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::vaultdb::KFilterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KFilterResponse>> AsyncKFilter(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KFilterResponse>>(AsyncKFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KFilterResponse>> PrepareAsyncKFilter(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KFilterResponse>>(PrepareAsyncKFilterRaw(context, request, cq));
    }
    ::grpc::Status KJoin(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::vaultdb::KJoinResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KJoinResponse>> AsyncKJoin(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KJoinResponse>>(AsyncKJoinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KJoinResponse>> PrepareAsyncKJoin(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KJoinResponse>>(PrepareAsyncKJoinRaw(context, request, cq));
    }
    ::grpc::Status KSort(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::vaultdb::KSortResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KSortResponse>> AsyncKSort(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KSortResponse>>(AsyncKSortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KSortResponse>> PrepareAsyncKSort(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::KSortResponse>>(PrepareAsyncKSortRaw(context, request, cq));
    }
    ::grpc::Status Generalize(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::vaultdb::GeneralizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GeneralizeResponse>> AsyncGeneralize(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GeneralizeResponse>>(AsyncGeneralizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GeneralizeResponse>> PrepareAsyncGeneralize(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::GeneralizeResponse>>(PrepareAsyncGeneralizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::vaultdb::SendTableRequest>> SendTable(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::vaultdb::SendTableRequest>>(SendTableRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::vaultdb::SendTableRequest>> AsyncSendTable(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::vaultdb::SendTableRequest>>(AsyncSendTableRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::vaultdb::SendTableRequest>> PrepareAsyncSendTable(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::vaultdb::SendTableRequest>>(PrepareAsyncSendTableRaw(context, response, cq));
    }
    ::grpc::Status RepartitionStepOne(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::vaultdb::RepartitionStepOneResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepOneResponse>> AsyncRepartitionStepOne(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepOneResponse>>(AsyncRepartitionStepOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepOneResponse>> PrepareAsyncRepartitionStepOne(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepOneResponse>>(PrepareAsyncRepartitionStepOneRaw(context, request, cq));
    }
    ::grpc::Status RepartitionStepTwo(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::vaultdb::RepartitionStepTwoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepTwoResponse>> AsyncRepartitionStepTwo(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepTwoResponse>>(AsyncRepartitionStepTwoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepTwoResponse>> PrepareAsyncRepartitionStepTwo(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepTwoResponse>>(PrepareAsyncRepartitionStepTwoRaw(context, request, cq));
    }
    ::grpc::Status CoalesceTables(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::vaultdb::CoaleseTablesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::CoaleseTablesResponse>> AsyncCoalesceTables(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::CoaleseTablesResponse>>(AsyncCoalesceTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::CoaleseTablesResponse>> PrepareAsyncCoalesceTables(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vaultdb::CoaleseTablesResponse>>(PrepareAsyncCoalesceTablesRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::DBMSQueryResponse>* AsyncDBMSQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::DBMSQueryResponse>* PrepareAsyncDBMSQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::GetPeerHostsResponse>* AsyncGetPeerHostsRaw(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::GetPeerHostsResponse>* PrepareAsyncGetPeerHostsRaw(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::KFilterResponse>* AsyncKFilterRaw(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::KFilterResponse>* PrepareAsyncKFilterRaw(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::KJoinResponse>* AsyncKJoinRaw(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::KJoinResponse>* PrepareAsyncKJoinRaw(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::KSortResponse>* AsyncKSortRaw(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::KSortResponse>* PrepareAsyncKSortRaw(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::GeneralizeResponse>* AsyncGeneralizeRaw(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::GeneralizeResponse>* PrepareAsyncGeneralizeRaw(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::vaultdb::SendTableRequest>* SendTableRaw(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response) override;
    ::grpc::ClientAsyncWriter< ::vaultdb::SendTableRequest>* AsyncSendTableRaw(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::vaultdb::SendTableRequest>* PrepareAsyncSendTableRaw(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepOneResponse>* AsyncRepartitionStepOneRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepOneResponse>* PrepareAsyncRepartitionStepOneRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepTwoResponse>* AsyncRepartitionStepTwoRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepTwoResponse>* PrepareAsyncRepartitionStepTwoRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::CoaleseTablesResponse>* AsyncCoalesceTablesRaw(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vaultdb::CoaleseTablesResponse>* PrepareAsyncCoalesceTablesRaw(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DBMSQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeerHosts_;
    const ::grpc::internal::RpcMethod rpcmethod_KFilter_;
    const ::grpc::internal::RpcMethod rpcmethod_KJoin_;
    const ::grpc::internal::RpcMethod rpcmethod_KSort_;
    const ::grpc::internal::RpcMethod rpcmethod_Generalize_;
    const ::grpc::internal::RpcMethod rpcmethod_SendTable_;
    const ::grpc::internal::RpcMethod rpcmethod_RepartitionStepOne_;
    const ::grpc::internal::RpcMethod rpcmethod_RepartitionStepTwo_;
    const ::grpc::internal::RpcMethod rpcmethod_CoalesceTables_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DBMSQuery(::grpc::ServerContext* context, const ::vaultdb::DBMSQueryRequest* request, ::vaultdb::DBMSQueryResponse* response);
    virtual ::grpc::Status GetPeerHosts(::grpc::ServerContext* context, const ::vaultdb::GetPeerHostsRequest* request, ::vaultdb::GetPeerHostsResponse* response);
    virtual ::grpc::Status KFilter(::grpc::ServerContext* context, const ::vaultdb::KFilterRequest* request, ::vaultdb::KFilterResponse* response);
    virtual ::grpc::Status KJoin(::grpc::ServerContext* context, const ::vaultdb::KJoinRequest* request, ::vaultdb::KJoinResponse* response);
    virtual ::grpc::Status KSort(::grpc::ServerContext* context, const ::vaultdb::KSortRequest* request, ::vaultdb::KSortResponse* response);
    virtual ::grpc::Status Generalize(::grpc::ServerContext* context, const ::vaultdb::GeneralizeRequest* request, ::vaultdb::GeneralizeResponse* response);
    virtual ::grpc::Status SendTable(::grpc::ServerContext* context, ::grpc::ServerReader< ::vaultdb::SendTableRequest>* reader, ::vaultdb::SendTableResponse* response);
    virtual ::grpc::Status RepartitionStepOne(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepOneRequest* request, ::vaultdb::RepartitionStepOneResponse* response);
    virtual ::grpc::Status RepartitionStepTwo(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepTwoRequest* request, ::vaultdb::RepartitionStepTwoResponse* response);
    virtual ::grpc::Status CoalesceTables(::grpc::ServerContext* context, const ::vaultdb::CoaleseTablesRequest* request, ::vaultdb::CoaleseTablesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DBMSQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DBMSQuery() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DBMSQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DBMSQuery(::grpc::ServerContext* context, const ::vaultdb::DBMSQueryRequest* request, ::vaultdb::DBMSQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDBMSQuery(::grpc::ServerContext* context, ::vaultdb::DBMSQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::DBMSQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeerHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPeerHosts() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPeerHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerHosts(::grpc::ServerContext* context, const ::vaultdb::GetPeerHostsRequest* request, ::vaultdb::GetPeerHostsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerHosts(::grpc::ServerContext* context, ::vaultdb::GetPeerHostsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::GetPeerHostsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KFilter() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_KFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KFilter(::grpc::ServerContext* context, const ::vaultdb::KFilterRequest* request, ::vaultdb::KFilterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKFilter(::grpc::ServerContext* context, ::vaultdb::KFilterRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::KFilterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KJoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KJoin() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_KJoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KJoin(::grpc::ServerContext* context, const ::vaultdb::KJoinRequest* request, ::vaultdb::KJoinResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKJoin(::grpc::ServerContext* context, ::vaultdb::KJoinRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::KJoinResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KSort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KSort() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_KSort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KSort(::grpc::ServerContext* context, const ::vaultdb::KSortRequest* request, ::vaultdb::KSortResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKSort(::grpc::ServerContext* context, ::vaultdb::KSortRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::KSortResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Generalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Generalize() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Generalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Generalize(::grpc::ServerContext* context, const ::vaultdb::GeneralizeRequest* request, ::vaultdb::GeneralizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneralize(::grpc::ServerContext* context, ::vaultdb::GeneralizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::GeneralizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendTable() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SendTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTable(::grpc::ServerContext* context, ::grpc::ServerReader< ::vaultdb::SendTableRequest>* reader, ::vaultdb::SendTableResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTable(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::vaultdb::SendTableResponse, ::vaultdb::SendTableRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(6, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RepartitionStepOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RepartitionStepOne() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RepartitionStepOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepartitionStepOne(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepOneRequest* request, ::vaultdb::RepartitionStepOneResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepartitionStepOne(::grpc::ServerContext* context, ::vaultdb::RepartitionStepOneRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::RepartitionStepOneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RepartitionStepTwo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RepartitionStepTwo() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RepartitionStepTwo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepartitionStepTwo(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepTwoRequest* request, ::vaultdb::RepartitionStepTwoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepartitionStepTwo(::grpc::ServerContext* context, ::vaultdb::RepartitionStepTwoRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::RepartitionStepTwoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CoalesceTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CoalesceTables() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CoalesceTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoalesceTables(::grpc::ServerContext* context, const ::vaultdb::CoaleseTablesRequest* request, ::vaultdb::CoaleseTablesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCoalesceTables(::grpc::ServerContext* context, ::vaultdb::CoaleseTablesRequest* request, ::grpc::ServerAsyncResponseWriter< ::vaultdb::CoaleseTablesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DBMSQuery<WithAsyncMethod_GetPeerHosts<WithAsyncMethod_KFilter<WithAsyncMethod_KJoin<WithAsyncMethod_KSort<WithAsyncMethod_Generalize<WithAsyncMethod_SendTable<WithAsyncMethod_RepartitionStepOne<WithAsyncMethod_RepartitionStepTwo<WithAsyncMethod_CoalesceTables<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_DBMSQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DBMSQuery() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DBMSQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DBMSQuery(::grpc::ServerContext* context, const ::vaultdb::DBMSQueryRequest* request, ::vaultdb::DBMSQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeerHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPeerHosts() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPeerHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerHosts(::grpc::ServerContext* context, const ::vaultdb::GetPeerHostsRequest* request, ::vaultdb::GetPeerHostsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KFilter() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_KFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KFilter(::grpc::ServerContext* context, const ::vaultdb::KFilterRequest* request, ::vaultdb::KFilterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KJoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KJoin() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_KJoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KJoin(::grpc::ServerContext* context, const ::vaultdb::KJoinRequest* request, ::vaultdb::KJoinResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KSort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KSort() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_KSort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KSort(::grpc::ServerContext* context, const ::vaultdb::KSortRequest* request, ::vaultdb::KSortResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Generalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Generalize() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Generalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Generalize(::grpc::ServerContext* context, const ::vaultdb::GeneralizeRequest* request, ::vaultdb::GeneralizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendTable() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SendTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTable(::grpc::ServerContext* context, ::grpc::ServerReader< ::vaultdb::SendTableRequest>* reader, ::vaultdb::SendTableResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RepartitionStepOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RepartitionStepOne() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RepartitionStepOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepartitionStepOne(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepOneRequest* request, ::vaultdb::RepartitionStepOneResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RepartitionStepTwo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RepartitionStepTwo() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RepartitionStepTwo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepartitionStepTwo(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepTwoRequest* request, ::vaultdb::RepartitionStepTwoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CoalesceTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CoalesceTables() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CoalesceTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoalesceTables(::grpc::ServerContext* context, const ::vaultdb::CoaleseTablesRequest* request, ::vaultdb::CoaleseTablesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DBMSQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DBMSQuery() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DBMSQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DBMSQuery(::grpc::ServerContext* context, const ::vaultdb::DBMSQueryRequest* request, ::vaultdb::DBMSQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDBMSQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeerHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPeerHosts() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPeerHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerHosts(::grpc::ServerContext* context, const ::vaultdb::GetPeerHostsRequest* request, ::vaultdb::GetPeerHostsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerHosts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KFilter() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_KFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KFilter(::grpc::ServerContext* context, const ::vaultdb::KFilterRequest* request, ::vaultdb::KFilterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKFilter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KJoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KJoin() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_KJoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KJoin(::grpc::ServerContext* context, const ::vaultdb::KJoinRequest* request, ::vaultdb::KJoinResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKJoin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KSort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KSort() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_KSort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KSort(::grpc::ServerContext* context, const ::vaultdb::KSortRequest* request, ::vaultdb::KSortResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKSort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Generalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Generalize() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Generalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Generalize(::grpc::ServerContext* context, const ::vaultdb::GeneralizeRequest* request, ::vaultdb::GeneralizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneralize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendTable() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SendTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTable(::grpc::ServerContext* context, ::grpc::ServerReader< ::vaultdb::SendTableRequest>* reader, ::vaultdb::SendTableResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTable(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(6, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RepartitionStepOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RepartitionStepOne() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RepartitionStepOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepartitionStepOne(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepOneRequest* request, ::vaultdb::RepartitionStepOneResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepartitionStepOne(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RepartitionStepTwo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RepartitionStepTwo() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RepartitionStepTwo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepartitionStepTwo(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepTwoRequest* request, ::vaultdb::RepartitionStepTwoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepartitionStepTwo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CoalesceTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CoalesceTables() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CoalesceTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoalesceTables(::grpc::ServerContext* context, const ::vaultdb::CoaleseTablesRequest* request, ::vaultdb::CoaleseTablesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCoalesceTables(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DBMSQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DBMSQuery() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::DBMSQueryRequest, ::vaultdb::DBMSQueryResponse>(std::bind(&WithStreamedUnaryMethod_DBMSQuery<BaseClass>::StreamedDBMSQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DBMSQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DBMSQuery(::grpc::ServerContext* context, const ::vaultdb::DBMSQueryRequest* request, ::vaultdb::DBMSQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDBMSQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::DBMSQueryRequest,::vaultdb::DBMSQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeerHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPeerHosts() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::GetPeerHostsRequest, ::vaultdb::GetPeerHostsResponse>(std::bind(&WithStreamedUnaryMethod_GetPeerHosts<BaseClass>::StreamedGetPeerHosts, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPeerHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeerHosts(::grpc::ServerContext* context, const ::vaultdb::GetPeerHostsRequest* request, ::vaultdb::GetPeerHostsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeerHosts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::GetPeerHostsRequest,::vaultdb::GetPeerHostsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KFilter() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::KFilterRequest, ::vaultdb::KFilterResponse>(std::bind(&WithStreamedUnaryMethod_KFilter<BaseClass>::StreamedKFilter, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KFilter(::grpc::ServerContext* context, const ::vaultdb::KFilterRequest* request, ::vaultdb::KFilterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKFilter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::KFilterRequest,::vaultdb::KFilterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KJoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KJoin() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::KJoinRequest, ::vaultdb::KJoinResponse>(std::bind(&WithStreamedUnaryMethod_KJoin<BaseClass>::StreamedKJoin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KJoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KJoin(::grpc::ServerContext* context, const ::vaultdb::KJoinRequest* request, ::vaultdb::KJoinResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKJoin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::KJoinRequest,::vaultdb::KJoinResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KSort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KSort() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::KSortRequest, ::vaultdb::KSortResponse>(std::bind(&WithStreamedUnaryMethod_KSort<BaseClass>::StreamedKSort, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KSort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KSort(::grpc::ServerContext* context, const ::vaultdb::KSortRequest* request, ::vaultdb::KSortResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKSort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::KSortRequest,::vaultdb::KSortResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Generalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Generalize() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::GeneralizeRequest, ::vaultdb::GeneralizeResponse>(std::bind(&WithStreamedUnaryMethod_Generalize<BaseClass>::StreamedGeneralize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Generalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Generalize(::grpc::ServerContext* context, const ::vaultdb::GeneralizeRequest* request, ::vaultdb::GeneralizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGeneralize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::GeneralizeRequest,::vaultdb::GeneralizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RepartitionStepOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RepartitionStepOne() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::RepartitionStepOneRequest, ::vaultdb::RepartitionStepOneResponse>(std::bind(&WithStreamedUnaryMethod_RepartitionStepOne<BaseClass>::StreamedRepartitionStepOne, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RepartitionStepOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RepartitionStepOne(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepOneRequest* request, ::vaultdb::RepartitionStepOneResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRepartitionStepOne(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::RepartitionStepOneRequest,::vaultdb::RepartitionStepOneResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RepartitionStepTwo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RepartitionStepTwo() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::RepartitionStepTwoRequest, ::vaultdb::RepartitionStepTwoResponse>(std::bind(&WithStreamedUnaryMethod_RepartitionStepTwo<BaseClass>::StreamedRepartitionStepTwo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RepartitionStepTwo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RepartitionStepTwo(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepTwoRequest* request, ::vaultdb::RepartitionStepTwoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRepartitionStepTwo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::RepartitionStepTwoRequest,::vaultdb::RepartitionStepTwoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CoalesceTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CoalesceTables() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::vaultdb::CoaleseTablesRequest, ::vaultdb::CoaleseTablesResponse>(std::bind(&WithStreamedUnaryMethod_CoalesceTables<BaseClass>::StreamedCoalesceTables, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CoalesceTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CoalesceTables(::grpc::ServerContext* context, const ::vaultdb::CoaleseTablesRequest* request, ::vaultdb::CoaleseTablesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCoalesceTables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vaultdb::CoaleseTablesRequest,::vaultdb::CoaleseTablesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DBMSQuery<WithStreamedUnaryMethod_GetPeerHosts<WithStreamedUnaryMethod_KFilter<WithStreamedUnaryMethod_KJoin<WithStreamedUnaryMethod_KSort<WithStreamedUnaryMethod_Generalize<WithStreamedUnaryMethod_RepartitionStepOne<WithStreamedUnaryMethod_RepartitionStepTwo<WithStreamedUnaryMethod_CoalesceTables<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DBMSQuery<WithStreamedUnaryMethod_GetPeerHosts<WithStreamedUnaryMethod_KFilter<WithStreamedUnaryMethod_KJoin<WithStreamedUnaryMethod_KSort<WithStreamedUnaryMethod_Generalize<WithStreamedUnaryMethod_RepartitionStepOne<WithStreamedUnaryMethod_RepartitionStepTwo<WithStreamedUnaryMethod_CoalesceTables<Service > > > > > > > > > StreamedService;
};

}  // namespace vaultdb


#endif  // GRPC_vaultdb_2eproto__INCLUDED
