// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vaultdb.proto

#include "vaultdb.pb.h"
#include "vaultdb.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vaultdb {

static const char* VaultDBOperators_method_names[] = {
  "/vaultdb.VaultDBOperators/DBQuery",
  "/vaultdb.VaultDBOperators/GetTableStream",
  "/vaultdb.VaultDBOperators/GetTable",
};

std::unique_ptr< VaultDBOperators::Stub> VaultDBOperators::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VaultDBOperators::Stub> stub(new VaultDBOperators::Stub(channel));
  return stub;
}

VaultDBOperators::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DBQuery_(VaultDBOperators_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTableStream_(VaultDBOperators_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetTable_(VaultDBOperators_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status VaultDBOperators::Stub::DBQuery(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::vaultdb::DBQueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DBQuery_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::DBQueryResponse>* VaultDBOperators::Stub::AsyncDBQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::DBQueryResponse>::Create(channel_.get(), cq, rpcmethod_DBQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::DBQueryResponse>* VaultDBOperators::Stub::PrepareAsyncDBQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::DBQueryResponse>::Create(channel_.get(), cq, rpcmethod_DBQuery_, context, request, false);
}

::grpc::ClientReader< ::vaultdb::TableStream>* VaultDBOperators::Stub::GetTableStreamRaw(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vaultdb::TableStream>::Create(channel_.get(), rpcmethod_GetTableStream_, context, request);
}

::grpc::ClientAsyncReader< ::vaultdb::TableStream>* VaultDBOperators::Stub::AsyncGetTableStreamRaw(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vaultdb::TableStream>::Create(channel_.get(), cq, rpcmethod_GetTableStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vaultdb::TableStream>* VaultDBOperators::Stub::PrepareAsyncGetTableStreamRaw(::grpc::ClientContext* context, const ::vaultdb::TableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vaultdb::TableStream>::Create(channel_.get(), cq, rpcmethod_GetTableStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vaultdb::TableQueryResponse>* VaultDBOperators::Stub::GetTableRaw(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vaultdb::TableQueryResponse>::Create(channel_.get(), rpcmethod_GetTable_, context, request);
}

::grpc::ClientAsyncReader< ::vaultdb::TableQueryResponse>* VaultDBOperators::Stub::AsyncGetTableRaw(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vaultdb::TableQueryResponse>::Create(channel_.get(), cq, rpcmethod_GetTable_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vaultdb::TableQueryResponse>* VaultDBOperators::Stub::PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::vaultdb::TableQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vaultdb::TableQueryResponse>::Create(channel_.get(), cq, rpcmethod_GetTable_, context, request, false, nullptr);
}

VaultDBOperators::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultDBOperators_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultDBOperators::Service, ::vaultdb::DBQueryRequest, ::vaultdb::DBQueryResponse>(
          std::mem_fn(&VaultDBOperators::Service::DBQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultDBOperators_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< VaultDBOperators::Service, ::vaultdb::TableRequest, ::vaultdb::TableStream>(
          std::mem_fn(&VaultDBOperators::Service::GetTableStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultDBOperators_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< VaultDBOperators::Service, ::vaultdb::TableQueryRequest, ::vaultdb::TableQueryResponse>(
          std::mem_fn(&VaultDBOperators::Service::GetTable), this)));
}

VaultDBOperators::Service::~Service() {
}

::grpc::Status VaultDBOperators::Service::DBQuery(::grpc::ServerContext* context, const ::vaultdb::DBQueryRequest* request, ::vaultdb::DBQueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VaultDBOperators::Service::GetTableStream(::grpc::ServerContext* context, const ::vaultdb::TableRequest* request, ::grpc::ServerWriter< ::vaultdb::TableStream>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VaultDBOperators::Service::GetTable(::grpc::ServerContext* context, const ::vaultdb::TableQueryRequest* request, ::grpc::ServerWriter< ::vaultdb::TableQueryResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* HonestBroker_method_names[] = {
  "/vaultdb.HonestBroker/NumHosts",
  "/vaultdb.HonestBroker/Register",
  "/vaultdb.HonestBroker/GetControlFlowColumn",
};

std::unique_ptr< HonestBroker::Stub> HonestBroker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HonestBroker::Stub> stub(new HonestBroker::Stub(channel));
  return stub;
}

HonestBroker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_NumHosts_(HonestBroker_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(HonestBroker_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetControlFlowColumn_(HonestBroker_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HonestBroker::Stub::NumHosts(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::vaultdb::NumHostResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NumHosts_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::NumHostResp>* HonestBroker::Stub::AsyncNumHostsRaw(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::NumHostResp>::Create(channel_.get(), cq, rpcmethod_NumHosts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::NumHostResp>* HonestBroker::Stub::PrepareAsyncNumHostsRaw(::grpc::ClientContext* context, const ::vaultdb::NumHostsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::NumHostResp>::Create(channel_.get(), cq, rpcmethod_NumHosts_, context, request, false);
}

::grpc::Status HonestBroker::Stub::Register(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::vaultdb::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::RegisterResponse>* HonestBroker::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::RegisterResponse>* HonestBroker::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::vaultdb::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

::grpc::Status HonestBroker::Stub::GetControlFlowColumn(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::vaultdb::GetControlFlowColumnResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetControlFlowColumn_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::GetControlFlowColumnResponse>* HonestBroker::Stub::AsyncGetControlFlowColumnRaw(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::GetControlFlowColumnResponse>::Create(channel_.get(), cq, rpcmethod_GetControlFlowColumn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::GetControlFlowColumnResponse>* HonestBroker::Stub::PrepareAsyncGetControlFlowColumnRaw(::grpc::ClientContext* context, const ::vaultdb::GetControlFlowColumnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::GetControlFlowColumnResponse>::Create(channel_.get(), cq, rpcmethod_GetControlFlowColumn_, context, request, false);
}

HonestBroker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HonestBroker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HonestBroker::Service, ::vaultdb::NumHostsRequest, ::vaultdb::NumHostResp>(
          std::mem_fn(&HonestBroker::Service::NumHosts), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HonestBroker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HonestBroker::Service, ::vaultdb::RegisterRequest, ::vaultdb::RegisterResponse>(
          std::mem_fn(&HonestBroker::Service::Register), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HonestBroker_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HonestBroker::Service, ::vaultdb::GetControlFlowColumnRequest, ::vaultdb::GetControlFlowColumnResponse>(
          std::mem_fn(&HonestBroker::Service::GetControlFlowColumn), this)));
}

HonestBroker::Service::~Service() {
}

::grpc::Status HonestBroker::Service::NumHosts(::grpc::ServerContext* context, const ::vaultdb::NumHostsRequest* request, ::vaultdb::NumHostResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HonestBroker::Service::Register(::grpc::ServerContext* context, const ::vaultdb::RegisterRequest* request, ::vaultdb::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HonestBroker::Service::GetControlFlowColumn(::grpc::ServerContext* context, const ::vaultdb::GetControlFlowColumnRequest* request, ::vaultdb::GetControlFlowColumnResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DataOwner_method_names[] = {
  "/vaultdb.DataOwner/DBMSQuery",
  "/vaultdb.DataOwner/GetPeerHosts",
  "/vaultdb.DataOwner/KFilter",
  "/vaultdb.DataOwner/KJoin",
  "/vaultdb.DataOwner/KSort",
  "/vaultdb.DataOwner/KAggregate",
  "/vaultdb.DataOwner/Generalize",
  "/vaultdb.DataOwner/SendTable",
  "/vaultdb.DataOwner/RepartitionStepOne",
  "/vaultdb.DataOwner/RepartitionStepTwo",
  "/vaultdb.DataOwner/CoalesceTables",
};

std::unique_ptr< DataOwner::Stub> DataOwner::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataOwner::Stub> stub(new DataOwner::Stub(channel));
  return stub;
}

DataOwner::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DBMSQuery_(DataOwner_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeerHosts_(DataOwner_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KFilter_(DataOwner_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KJoin_(DataOwner_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KSort_(DataOwner_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KAggregate_(DataOwner_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Generalize_(DataOwner_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendTable_(DataOwner_method_names[7], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_RepartitionStepOne_(DataOwner_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RepartitionStepTwo_(DataOwner_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CoalesceTables_(DataOwner_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataOwner::Stub::DBMSQuery(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::vaultdb::DBMSQueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DBMSQuery_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::DBMSQueryResponse>* DataOwner::Stub::AsyncDBMSQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::DBMSQueryResponse>::Create(channel_.get(), cq, rpcmethod_DBMSQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::DBMSQueryResponse>* DataOwner::Stub::PrepareAsyncDBMSQueryRaw(::grpc::ClientContext* context, const ::vaultdb::DBMSQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::DBMSQueryResponse>::Create(channel_.get(), cq, rpcmethod_DBMSQuery_, context, request, false);
}

::grpc::Status DataOwner::Stub::GetPeerHosts(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::vaultdb::GetPeerHostsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPeerHosts_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::GetPeerHostsResponse>* DataOwner::Stub::AsyncGetPeerHostsRaw(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::GetPeerHostsResponse>::Create(channel_.get(), cq, rpcmethod_GetPeerHosts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::GetPeerHostsResponse>* DataOwner::Stub::PrepareAsyncGetPeerHostsRaw(::grpc::ClientContext* context, const ::vaultdb::GetPeerHostsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::GetPeerHostsResponse>::Create(channel_.get(), cq, rpcmethod_GetPeerHosts_, context, request, false);
}

::grpc::Status DataOwner::Stub::KFilter(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::vaultdb::KFilterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KFilter_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::KFilterResponse>* DataOwner::Stub::AsyncKFilterRaw(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::KFilterResponse>::Create(channel_.get(), cq, rpcmethod_KFilter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::KFilterResponse>* DataOwner::Stub::PrepareAsyncKFilterRaw(::grpc::ClientContext* context, const ::vaultdb::KFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::KFilterResponse>::Create(channel_.get(), cq, rpcmethod_KFilter_, context, request, false);
}

::grpc::Status DataOwner::Stub::KJoin(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::vaultdb::KJoinResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KJoin_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::KJoinResponse>* DataOwner::Stub::AsyncKJoinRaw(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::KJoinResponse>::Create(channel_.get(), cq, rpcmethod_KJoin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::KJoinResponse>* DataOwner::Stub::PrepareAsyncKJoinRaw(::grpc::ClientContext* context, const ::vaultdb::KJoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::KJoinResponse>::Create(channel_.get(), cq, rpcmethod_KJoin_, context, request, false);
}

::grpc::Status DataOwner::Stub::KSort(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::vaultdb::KSortResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KSort_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::KSortResponse>* DataOwner::Stub::AsyncKSortRaw(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::KSortResponse>::Create(channel_.get(), cq, rpcmethod_KSort_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::KSortResponse>* DataOwner::Stub::PrepareAsyncKSortRaw(::grpc::ClientContext* context, const ::vaultdb::KSortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::KSortResponse>::Create(channel_.get(), cq, rpcmethod_KSort_, context, request, false);
}

::grpc::Status DataOwner::Stub::KAggregate(::grpc::ClientContext* context, const ::vaultdb::KAggregateRequest& request, ::vaultdb::KAggregateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KAggregate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::KAggregateResponse>* DataOwner::Stub::AsyncKAggregateRaw(::grpc::ClientContext* context, const ::vaultdb::KAggregateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::KAggregateResponse>::Create(channel_.get(), cq, rpcmethod_KAggregate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::KAggregateResponse>* DataOwner::Stub::PrepareAsyncKAggregateRaw(::grpc::ClientContext* context, const ::vaultdb::KAggregateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::KAggregateResponse>::Create(channel_.get(), cq, rpcmethod_KAggregate_, context, request, false);
}

::grpc::Status DataOwner::Stub::Generalize(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::vaultdb::GeneralizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Generalize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::GeneralizeResponse>* DataOwner::Stub::AsyncGeneralizeRaw(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::GeneralizeResponse>::Create(channel_.get(), cq, rpcmethod_Generalize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::GeneralizeResponse>* DataOwner::Stub::PrepareAsyncGeneralizeRaw(::grpc::ClientContext* context, const ::vaultdb::GeneralizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::GeneralizeResponse>::Create(channel_.get(), cq, rpcmethod_Generalize_, context, request, false);
}

::grpc::ClientWriter< ::vaultdb::SendTableRequest>* DataOwner::Stub::SendTableRaw(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::vaultdb::SendTableRequest>::Create(channel_.get(), rpcmethod_SendTable_, context, response);
}

::grpc::ClientAsyncWriter< ::vaultdb::SendTableRequest>* DataOwner::Stub::AsyncSendTableRaw(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::vaultdb::SendTableRequest>::Create(channel_.get(), cq, rpcmethod_SendTable_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::vaultdb::SendTableRequest>* DataOwner::Stub::PrepareAsyncSendTableRaw(::grpc::ClientContext* context, ::vaultdb::SendTableResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::vaultdb::SendTableRequest>::Create(channel_.get(), cq, rpcmethod_SendTable_, context, response, false, nullptr);
}

::grpc::Status DataOwner::Stub::RepartitionStepOne(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::vaultdb::RepartitionStepOneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RepartitionStepOne_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepOneResponse>* DataOwner::Stub::AsyncRepartitionStepOneRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::RepartitionStepOneResponse>::Create(channel_.get(), cq, rpcmethod_RepartitionStepOne_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepOneResponse>* DataOwner::Stub::PrepareAsyncRepartitionStepOneRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepOneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::RepartitionStepOneResponse>::Create(channel_.get(), cq, rpcmethod_RepartitionStepOne_, context, request, false);
}

::grpc::Status DataOwner::Stub::RepartitionStepTwo(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::vaultdb::RepartitionStepTwoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RepartitionStepTwo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepTwoResponse>* DataOwner::Stub::AsyncRepartitionStepTwoRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::RepartitionStepTwoResponse>::Create(channel_.get(), cq, rpcmethod_RepartitionStepTwo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::RepartitionStepTwoResponse>* DataOwner::Stub::PrepareAsyncRepartitionStepTwoRaw(::grpc::ClientContext* context, const ::vaultdb::RepartitionStepTwoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::RepartitionStepTwoResponse>::Create(channel_.get(), cq, rpcmethod_RepartitionStepTwo_, context, request, false);
}

::grpc::Status DataOwner::Stub::CoalesceTables(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::vaultdb::CoaleseTablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CoalesceTables_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::CoaleseTablesResponse>* DataOwner::Stub::AsyncCoalesceTablesRaw(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::CoaleseTablesResponse>::Create(channel_.get(), cq, rpcmethod_CoalesceTables_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vaultdb::CoaleseTablesResponse>* DataOwner::Stub::PrepareAsyncCoalesceTablesRaw(::grpc::ClientContext* context, const ::vaultdb::CoaleseTablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vaultdb::CoaleseTablesResponse>::Create(channel_.get(), cq, rpcmethod_CoalesceTables_, context, request, false);
}

DataOwner::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::DBMSQueryRequest, ::vaultdb::DBMSQueryResponse>(
          std::mem_fn(&DataOwner::Service::DBMSQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::GetPeerHostsRequest, ::vaultdb::GetPeerHostsResponse>(
          std::mem_fn(&DataOwner::Service::GetPeerHosts), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::KFilterRequest, ::vaultdb::KFilterResponse>(
          std::mem_fn(&DataOwner::Service::KFilter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::KJoinRequest, ::vaultdb::KJoinResponse>(
          std::mem_fn(&DataOwner::Service::KJoin), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::KSortRequest, ::vaultdb::KSortResponse>(
          std::mem_fn(&DataOwner::Service::KSort), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::KAggregateRequest, ::vaultdb::KAggregateResponse>(
          std::mem_fn(&DataOwner::Service::KAggregate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::GeneralizeRequest, ::vaultdb::GeneralizeResponse>(
          std::mem_fn(&DataOwner::Service::Generalize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[7],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< DataOwner::Service, ::vaultdb::SendTableRequest, ::vaultdb::SendTableResponse>(
          std::mem_fn(&DataOwner::Service::SendTable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::RepartitionStepOneRequest, ::vaultdb::RepartitionStepOneResponse>(
          std::mem_fn(&DataOwner::Service::RepartitionStepOne), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::RepartitionStepTwoRequest, ::vaultdb::RepartitionStepTwoResponse>(
          std::mem_fn(&DataOwner::Service::RepartitionStepTwo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataOwner_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataOwner::Service, ::vaultdb::CoaleseTablesRequest, ::vaultdb::CoaleseTablesResponse>(
          std::mem_fn(&DataOwner::Service::CoalesceTables), this)));
}

DataOwner::Service::~Service() {
}

::grpc::Status DataOwner::Service::DBMSQuery(::grpc::ServerContext* context, const ::vaultdb::DBMSQueryRequest* request, ::vaultdb::DBMSQueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::GetPeerHosts(::grpc::ServerContext* context, const ::vaultdb::GetPeerHostsRequest* request, ::vaultdb::GetPeerHostsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::KFilter(::grpc::ServerContext* context, const ::vaultdb::KFilterRequest* request, ::vaultdb::KFilterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::KJoin(::grpc::ServerContext* context, const ::vaultdb::KJoinRequest* request, ::vaultdb::KJoinResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::KSort(::grpc::ServerContext* context, const ::vaultdb::KSortRequest* request, ::vaultdb::KSortResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::KAggregate(::grpc::ServerContext* context, const ::vaultdb::KAggregateRequest* request, ::vaultdb::KAggregateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::Generalize(::grpc::ServerContext* context, const ::vaultdb::GeneralizeRequest* request, ::vaultdb::GeneralizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::SendTable(::grpc::ServerContext* context, ::grpc::ServerReader< ::vaultdb::SendTableRequest>* reader, ::vaultdb::SendTableResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::RepartitionStepOne(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepOneRequest* request, ::vaultdb::RepartitionStepOneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::RepartitionStepTwo(::grpc::ServerContext* context, const ::vaultdb::RepartitionStepTwoRequest* request, ::vaultdb::RepartitionStepTwoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataOwner::Service::CoalesceTables(::grpc::ServerContext* context, const ::vaultdb::CoaleseTablesRequest* request, ::vaultdb::CoaleseTablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vaultdb

